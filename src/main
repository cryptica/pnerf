#!/bin/bash

# **********************************************************************
# Preamble

function absolute_path {
    (cd "$(dirname "$1")" && pwd)
}

function print_title {
    cat <<EOF
PETRINIZER: The checker for Petri Nets
[$1]
EOF
}

function print_usage {
    cat <<EOF

Usage: $0 [options] input_file
Option list:
 -h | --h | -help | --help    : Prints this help
 -v                           : Verbose output

EOF
}

function vecho {
    if [ -n "$verbose" ]; then
        echo "$1"
    fi
}


# **********************************************************************
# Entry point

print_title "$*"


# parse parameters
for a in $@; do
    case $a in
        h | --h | -help | --help)
            print_usage
            exit 0
            ;;
        -v | --v)
            verbose=true
            ;;
        -*)
            echo 'ERROR: Unknown option '$a
            exit 3
            ;;
        *)
            input=$a
    esac
done

if [ -z $input ]; then
    echo 'ERROR: No input file was given'
    exit 3
fi

if [ ! -e $input ]; then
    echo "ERROR: The file $input does not exist"
    exit 3
fi

sysdir=$(absolute_path $0)

tmpdir=/tmp/pnerf-$(date +%s%N)
mkdir $tmpdir

set -e
set -o pipefail

function exit_with {
  result=$1
  iterations=$2
  echo
  echo '-------------------------------------------'
  if [[ $result -eq 0 ]]; then
    echo 'The petri net satisfies the property!'
  else
    echo 'The petri net may not satisfy the property'
  fi
  echo '-------------------------------------------'
  echo
  echo
  set +o pipefail
  set +e
  rm -r $tmpdir
  exit $result
}

function run_z3 {
  z3_input=$1
  z3_output=$2
  if [ -z "$verbose" ]; then
    z3 -smt2 $z3_input >$z3_output
    res=$?
  else
    z3 -smt2 $z3_input | tee $z3_output
    res=$?
  fi
  return $res
}

function run_sicstus {
  prolog_file=$1
  pl_output=$2
  pl_input=${@:3}
  if [ -z "$verbose" ]; then
    sicstus -l "$sysdir"/$prolog_file -- $pl_input 2>/dev/null >$pl_output
    res=$?
  else
    sicstus -l "$sysdir"/$prolog_file -- $pl_input 2>/dev/null | tee $pl_output
    res=$?
  fi
  return $res
}

#refinement_methods=( 'trap' 'empty-trap' 'subnet-trap' )
#refinement_methods=( 'trap' 'empty-trap' )
#refinement_methods=( 'trap' )
refinement_methods=( )
#equation_type='Int'
equation_type='Real'

vecho
vecho '* Constructing petri net N from input file'
run_sicstus input-file-to-petri-net.pl $tmpdir/pp-petri-net.pl $(absolute_path $input)/$(basename $input)

vecho
vecho '* Constructing constraints C_0 for petri net N'
run_sicstus petri-net-to-constraints.pl $tmpdir/constraints-c.smt2 $equation_type $tmpdir/pp-petri-net.pl

method_count=${#refinement_methods[@]}
iter=0
while
  (
    vecho
    vecho "* Iteration $iter"
    vecho
    vecho "* Checking SAT(C_$iter)"
    run_z3 $tmpdir/constraints-c.smt2 $tmpdir/model-a.smt2
  ); do
    vecho
    vecho "- sat, getting model A for C_$iter"
    if [ -z "$verbose" ]; then
        cat $tmpdir/model-a.smt2 | "$sysdir"/smt2-model-to-prolog-model.sh >$tmpdir/model-a.pl
    else
        cat $tmpdir/model-a.smt2 | "$sysdir"/smt2-model-to-prolog-model.sh | tee $tmpdir/model-a.pl
    fi

    method_index=0
    while [[ $method_index -lt $method_count ]]; do
        method=${refinement_methods[$method_index]}
        vecho
        vecho "* Applying refinement method '$method'"

        vecho "- constructing $method constraints C_theta for petri net N and model A"
        run_sicstus refinement-methods/$method-constraints.pl $tmpdir/constraints-ctheta.smt2 $tmpdir/pp-petri-net.pl $tmpdir/model-a.pl
        vecho '- checking SAT(C_theta)'
        if ( run_z3 $tmpdir/constraints-ctheta.smt2 $tmpdir/model-atheta.smt2 ); then
            vecho "- sat, getting model A_theta for C_theta"
            if [ -z "$verbose" ]; then
                cat $tmpdir/model-atheta.smt2 | "$sysdir"/smt2-model-to-prolog-model.sh >$tmpdir/model-atheta.pl
            else
                cat $tmpdir/model-atheta.smt2 | "$sysdir"/smt2-model-to-prolog-model.sh | tee $tmpdir/model-atheta.pl
            fi

            vecho "- constructing $method constraint delta for petri net N and model A_theta"
            run_sicstus refinement-methods/$method-delta-constraint.pl $tmpdir/constraint-delta.smt2 $tmpdir/pp-petri-net.pl $tmpdir/model-atheta.pl

            vecho "- constructing constraints C_$((iter+1)) for C_$iter and delta"
            if [ -z "$verbose" ]; then    
                "$sysdir"/succ-constraints.sh $tmpdir/constraints-c.smt2 $tmpdir/constraint-delta.smt2 >$tmpdir/constraints-cn.smt2
            else
                "$sysdir"/succ-constraints.sh $tmpdir/constraints-c.smt2 $tmpdir/constraint-delta.smt2 | tee $tmpdir/constraints-cn.smt2
            fi
            mv $tmpdir/constraints-cn.smt2 $tmpdir/constraints-c.smt2
            break
        else
            vecho " - unsat"
            method_index=$((method_index+1))
        fi
        vecho
    done
    if [[ $method_index -ge $method_count ]]; then
        exit_with 2 $iter
    fi
    iter=$((iter+1))
done
vecho " - unsat"

exit_with 0 $iter
