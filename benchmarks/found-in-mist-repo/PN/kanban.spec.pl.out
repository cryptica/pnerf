PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/kanban.spec.pl]

* Constructing petri net N from input file
place(x1, [t2], [t3]).
place(x0, [t3,t1], [t4,t2]).
place(x3, [t4], [t5]).
place(x5, [t6], [t7]).
place(x4, [t7,t5], [t8,t6]).
place(x7, [t8], [t9]).
place(x9, [t10], [t11]).
place(x8, [t11,t5], [t12,t10]).
place(x11, [t12], [t9]).
place(x13, [t13], [t14]).
place(x12, [t14,t9], [t15,t13]).
place(x15, [t15], [t16]).
place(x2, [init1,t5], [t1]).
place(x6, [init2,t9], [t5]).
place(x10, [init3,t9], [t5]).
place(x14, [init4,t16], [t9]).

transition(t1, [x2], [x0]).
transition(t2, [x0], [x1]).
transition(t3, [x1], [x0]).
transition(t4, [x0], [x3]).
transition(t5, [x3,x6,x10], [x2,x4,x8]).
transition(t6, [x4], [x5]).
transition(t7, [x5], [x4]).
transition(t8, [x4], [x7]).
transition(t9, [x7,x11,x14], [x6,x10,x12]).
transition(t10, [x8], [x9]).
transition(t11, [x9], [x8]).
transition(t12, [x8], [x11]).
transition(t13, [x12], [x13]).
transition(t14, [x13], [x12]).
transition(t15, [x12], [x15]).
transition(t16, [x15], [x14]).
transition(init1, [], [x2]).
transition(init2, [], [x6]).
transition(init3, [], [x10]).
transition(init4, [], [x14]).

weight(x2, t1, 1).
weight(t1, x0, 1).
weight(x0, t2, 1).
weight(t2, x1, 1).
weight(x1, t3, 1).
weight(t3, x0, 1).
weight(x0, t4, 1).
weight(t4, x3, 1).
weight(x3, t5, 1).
weight(x6, t5, 1).
weight(x10, t5, 1).
weight(t5, x2, 1).
weight(t5, x4, 1).
weight(t5, x8, 1).
weight(x4, t6, 1).
weight(t6, x5, 1).
weight(x5, t7, 1).
weight(t7, x4, 1).
weight(x4, t8, 1).
weight(t8, x7, 1).
weight(x7, t9, 1).
weight(x11, t9, 1).
weight(x14, t9, 1).
weight(t9, x6, 1).
weight(t9, x10, 1).
weight(t9, x12, 1).
weight(x8, t10, 1).
weight(t10, x9, 1).
weight(x9, t11, 1).
weight(t11, x8, 1).
weight(x8, t12, 1).
weight(t12, x11, 1).
weight(x12, t13, 1).
weight(t13, x13, 1).
weight(x13, t14, 1).
weight(t14, x12, 1).
weight(x12, t15, 1).
weight(t15, x15, 1).
weight(x15, t16, 1).
weight(t16, x14, 1).
weight(init1, x2, 1).
weight(init2, x6, 1).
weight(init3, x10, 1).
weight(init4, x14, 1).

init(x2, 1).
init(x6, 1).
init(x10, 1).
init(x14, 1).

cond('(>= x4 2)').
cond('(>= x6 4)').
cond('(>= x10 4)').
cond('(>= x13 6)').
cond('(>= x14 4)').

target(x4, 2).
target(x6, 4).
target(x10, 4).
target(x13, 6).
target(x14, 4).


* Constructing constraints C' for petri net N
(declare-fun x1 () Real)
(declare-fun x0 () Real)
(declare-fun x3 () Real)
(declare-fun x5 () Real)
(declare-fun x4 () Real)
(declare-fun x7 () Real)
(declare-fun x9 () Real)
(declare-fun x8 () Real)
(declare-fun x11 () Real)
(declare-fun x13 () Real)
(declare-fun x12 () Real)
(declare-fun x15 () Real)
(declare-fun x2 () Real)
(declare-fun x6 () Real)
(declare-fun x10 () Real)
(declare-fun x14 () Real)
(assert (>= 0 (+ x0 (- x2))))
(assert (>= 0 (+ (- x0) x1)))
(assert (>= 0 (+ x0 (- x1))))
(assert (>= 0 (+ (- x0) x3)))
(assert (>= 0 (+ (- x10) x2 (- x3) x4 (- x6) x8)))
(assert (>= 0 (+ (- x4) x5)))
(assert (>= 0 (+ x4 (- x5))))
(assert (>= 0 (+ (- x4) x7)))
(assert (>= 0 (+ x10 (- x11) x12 (- x14) x6 (- x7))))
(assert (>= 0 (+ (- x8) x9)))
(assert (>= 0 (+ x8 (- x9))))
(assert (>= 0 (+ x11 (- x8))))
(assert (>= 0 (+ (- x12) x13)))
(assert (>= 0 (+ x12 (- x13))))
(assert (>= 0 (+ (- x12) x15)))
(assert (>= 0 (+ x14 (- x15))))
(assert (>= 0 (+ x2)))
(assert (>= 0 (+ x6)))
(assert (>= 0 (+ x10)))
(assert (>= 0 (+ x14)))
(assert (= 1 (+ 0 (* 2 x4) (* 6 x13) (- x2) (* 3 x6) (* 3 x10) (* 3 x14))))
(assert (>= x1 0))
(assert (>= x0 0))
(assert (>= x3 0))
(assert (>= x5 0))
(assert (>= x4 0))
(assert (>= x7 0))
(assert (>= x9 0))
(assert (>= x8 0))
(assert (>= x11 0))
(assert (>= x13 0))
(assert (>= x12 0))
(assert (>= x15 0))
(assert (>= x2 0))
(assert (>= x6 0))
(assert (>= x10 0))
(assert (>= x14 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 55 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


