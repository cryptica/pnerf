PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/MultiME.spec.pl]

* Constructing petri net N from input file
place(x3, [t1], [t3]).
place(x2, [t3,t2], [t2,t1]).
place(x4, [t2], [t4]).
place(x1, [t4,t1], [t2,t1]).
place(x7, [t5], [t7]).
place(x6, [t7,t6], [t6,t5]).
place(x8, [t6], [t8]).
place(x5, [t8,t5], [t6,t5]).
place(x9, [], [t9]).
place(x11, [t10], [t11]).
place(x10, [t11,t9], [t10]).
place(x0, [t11,t8,t7,t4,t3], [t6,t5,t2,t1]).

transition(t1, [x0,x1,x2], [x1,x3]).
transition(t2, [x0,x1,x2], [x2,x4]).
transition(t3, [x3], [x0,x2]).
transition(t4, [x4], [x0,x1]).
transition(t5, [x0,x5,x6], [x5,x7]).
transition(t6, [x0,x5,x6], [x6,x8]).
transition(t7, [x7], [x0,x6]).
transition(t8, [x8], [x0,x5]).
transition(t9, [x9], [x10]).
transition(t10, [x10], [x11]).
transition(t11, [x11], [x10,x0]).

weight(x0, t1, 1).
weight(x1, t1, 1).
weight(x2, t1, 1).
weight(t1, x1, 1).
weight(t1, x3, 1).
weight(x0, t2, 1).
weight(x1, t2, 1).
weight(x2, t2, 1).
weight(t2, x2, 1).
weight(t2, x4, 1).
weight(x3, t3, 1).
weight(t3, x0, 1).
weight(t3, x2, 1).
weight(x4, t4, 1).
weight(t4, x0, 1).
weight(t4, x1, 1).
weight(x0, t5, 1).
weight(x5, t5, 1).
weight(x6, t5, 1).
weight(t5, x5, 1).
weight(t5, x7, 1).
weight(x0, t6, 1).
weight(x5, t6, 1).
weight(x6, t6, 1).
weight(t6, x6, 1).
weight(t6, x8, 1).
weight(x7, t7, 1).
weight(t7, x0, 1).
weight(t7, x6, 1).
weight(x8, t8, 1).
weight(t8, x0, 1).
weight(t8, x5, 1).
weight(x9, t9, 1).
weight(t9, x10, 1).
weight(x10, t10, 1).
weight(t10, x11, 1).
weight(x11, t11, 1).
weight(t11, x10, 1).
weight(t11, x0, 1).

init(x1, 1).
init(x2, 1).
init(x5, 1).
init(x6, 1).
init(x9, 1).

cond('(>= x3 1)').
cond('(>= x4 1)').
cond('(>= x3 2)').
cond('(>= x4 2)').

target(x3, 1).
target(x4, 1).
target(x3, 2).
target(x4, 2).


* Constructing constraints C' for petri net N
(declare-fun x3 () Real)
(declare-fun x2 () Real)
(declare-fun x4 () Real)
(declare-fun x1 () Real)
(declare-fun x7 () Real)
(declare-fun x6 () Real)
(declare-fun x8 () Real)
(declare-fun x5 () Real)
(declare-fun x9 () Real)
(declare-fun x11 () Real)
(declare-fun x10 () Real)
(declare-fun x0 () Real)
(assert (>= 0 (+ (- x0) (- x2) x3)))
(assert (>= 0 (+ (- x0) (- x1) x4)))
(assert (>= 0 (+ x0 x2 (- x3))))
(assert (>= 0 (+ x0 x1 (- x4))))
(assert (>= 0 (+ (- x0) (- x6) x7)))
(assert (>= 0 (+ (- x0) (- x5) x8)))
(assert (>= 0 (+ x0 x6 (- x7))))
(assert (>= 0 (+ x0 x5 (- x8))))
(assert (>= 0 (+ x10 (- x9))))
(assert (>= 0 (+ (- x10) x11)))
(assert (>= 0 (+ x0 x10 (- x11))))
(assert (= 1 (+ 0 (* 2 x3) (- x2) (* 2 x4) (- x1) (- x6) (- x5) (- x9))))
(assert (>= x3 0))
(assert (>= x2 0))
(assert (>= x4 0))
(assert (>= x1 0))
(assert (>= x7 0))
(assert (>= x6 0))
(assert (>= x8 0))
(assert (>= x5 0))
(assert (>= x9 0))
(assert (>= x11 0))
(assert (>= x10 0))
(assert (>= x0 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun x7 () Real
    0.0)
  (define-fun x10 () Real
    0.0)
  (define-fun x11 () Real
    0.0)
  (define-fun x9 () Real
    0.0)
  (define-fun x8 () Real
    0.0)
  (define-fun x3 () Real
    0.0)
  (define-fun x2 () Real
    0.0)
  (define-fun x1 () Real
    1.0)
  (define-fun x4 () Real
    1.0)
  (define-fun x6 () Real
    0.0)
  (define-fun x5 () Real
    0.0)
  (define-fun x0 () Real
    0.0)
)
- sat, getting model A' for C'
assignment('x7', 0.0).
assignment('x10', 0.0).
assignment('x11', 0.0).
assignment('x9', 0.0).
assignment('x8', 0.0).
assignment('x3', 0.0).
assignment('x2', 0.0).
assignment('x1', 1.0).
assignment('x4', 1.0).
assignment('x6', 0.0).
assignment('x5', 0.0).
assignment('x0', 0.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ x4 x1)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ x4 x1)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


