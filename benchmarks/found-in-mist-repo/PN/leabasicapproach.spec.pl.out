PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/leabasicapproach.spec.pl]

* Constructing petri net N from input file
place('Sbefore', [t1], [t2]).
place('Sbad', [t2], [t3]).
place('Sin', [t3], [t4]).
place('Safterin', [t4], [t5]).
place('Send', [t5], [t6]).
place('Cbefore', [t7], [t8]).
place('Cbad', [t8], [t9]).
place('Cin', [t9], [t10]).
place(lockS, [t9,t2], [t10,t5]).
place(unlockS, [t10,t5], [t9,t2]).
place('Cafterin', [t10], [t11]).
place(lockC, [t8,t3], [t11,t4]).
place(unlockC, [t11,t4], [t8,t3]).
place('Cend', [t11], [t12]).
place('Swhile', [init1,t6], [t1]).
place('Cwhile', [init2,t12], [t7]).

transition(t1, ['Swhile'], ['Sbefore']).
transition(t2, ['Sbefore',unlockS], ['Sbad',lockS]).
transition(t3, ['Sbad',unlockC], ['Sin',lockC]).
transition(t4, ['Sin',lockC], ['Safterin',unlockC]).
transition(t5, ['Safterin',lockS], ['Send',unlockS]).
transition(t6, ['Send'], ['Swhile']).
transition(t7, ['Cwhile'], ['Cbefore']).
transition(t8, ['Cbefore',unlockC], ['Cbad',lockC]).
transition(t9, ['Cbad',unlockS], ['Cin',lockS]).
transition(t10, ['Cin',lockS], ['Cafterin',unlockS]).
transition(t11, ['Cafterin',lockC], ['Cend',unlockC]).
transition(t12, ['Cend'], ['Cwhile']).
transition(init1, [], ['Swhile']).
transition(init2, [], ['Cwhile']).

weight('Swhile', t1, 1).
weight(t1, 'Sbefore', 1).
weight('Sbefore', t2, 1).
weight(unlockS, t2, 1).
weight(t2, 'Sbad', 1).
weight(t2, lockS, 1).
weight('Sbad', t3, 1).
weight(unlockC, t3, 1).
weight(t3, 'Sin', 1).
weight(t3, lockC, 1).
weight('Sin', t4, 1).
weight(lockC, t4, 1).
weight(t4, 'Safterin', 1).
weight(t4, unlockC, 1).
weight('Safterin', t5, 1).
weight(lockS, t5, 1).
weight(t5, 'Send', 1).
weight(t5, unlockS, 1).
weight('Send', t6, 1).
weight(t6, 'Swhile', 1).
weight('Cwhile', t7, 1).
weight(t7, 'Cbefore', 1).
weight('Cbefore', t8, 1).
weight(unlockC, t8, 1).
weight(t8, 'Cbad', 1).
weight(t8, lockC, 1).
weight('Cbad', t9, 1).
weight(unlockS, t9, 1).
weight(t9, 'Cin', 1).
weight(t9, lockS, 1).
weight('Cin', t10, 1).
weight(lockS, t10, 1).
weight(t10, 'Cafterin', 1).
weight(t10, unlockS, 1).
weight('Cafterin', t11, 1).
weight(lockC, t11, 1).
weight(t11, 'Cend', 1).
weight(t11, unlockC, 1).
weight('Cend', t12, 1).
weight(t12, 'Cwhile', 1).
weight(init1, 'Swhile', 1).
weight(init2, 'Cwhile', 1).

init(unlockS, 1).
init(unlockC, 1).
init('Swhile', 1).
init('Cwhile', 1).

cond('(>= Sbad 1)').
cond('(>= Cbad 1)').

target('Sbad', 1).
target('Cbad', 1).


* Constructing constraints C' for petri net N
(declare-fun Sbefore () Real)
(declare-fun Sbad () Real)
(declare-fun Sin () Real)
(declare-fun Safterin () Real)
(declare-fun Send () Real)
(declare-fun Cbefore () Real)
(declare-fun Cbad () Real)
(declare-fun Cin () Real)
(declare-fun lockS () Real)
(declare-fun unlockS () Real)
(declare-fun Cafterin () Real)
(declare-fun lockC () Real)
(declare-fun unlockC () Real)
(declare-fun Cend () Real)
(declare-fun Swhile () Real)
(declare-fun Cwhile () Real)
(assert (>= 0 (+ Sbefore (- Swhile))))
(assert (>= 0 (+ Sbad (- Sbefore) lockS (- unlockS))))
(assert (>= 0 (+ (- Sbad) Sin lockC (- unlockC))))
(assert (>= 0 (+ Safterin (- Sin) (- lockC) unlockC)))
(assert (>= 0 (+ (- Safterin) Send (- lockS) unlockS)))
(assert (>= 0 (+ (- Send) Swhile)))
(assert (>= 0 (+ Cbefore (- Cwhile))))
(assert (>= 0 (+ Cbad (- Cbefore) lockC (- unlockC))))
(assert (>= 0 (+ (- Cbad) Cin lockS (- unlockS))))
(assert (>= 0 (+ Cafterin (- Cin) (- lockS) unlockS)))
(assert (>= 0 (+ (- Cafterin) Cend (- lockC) unlockC)))
(assert (>= 0 (+ (- Cend) Cwhile)))
(assert (>= 0 (+ Swhile)))
(assert (>= 0 (+ Cwhile)))
(assert (= 1 (+ 0 Sbad Cbad (- unlockS) (- unlockC) (- Swhile) (- Cwhile))))
(assert (>= Sbefore 0))
(assert (>= Sbad 0))
(assert (>= Sin 0))
(assert (>= Safterin 0))
(assert (>= Send 0))
(assert (>= Cbefore 0))
(assert (>= Cbad 0))
(assert (>= Cin 0))
(assert (>= lockS 0))
(assert (>= unlockS 0))
(assert (>= Cafterin 0))
(assert (>= lockC 0))
(assert (>= unlockC 0))
(assert (>= Cend 0))
(assert (>= Swhile 0))
(assert (>= Cwhile 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 49 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


