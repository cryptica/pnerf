PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/mesh2x2.spec.pl]

* Constructing petri net N from input file
place(x2, [t1], [t7]).
place(x5, [t2], [t8]).
place(x6, [t3], [t9]).
place(x7, [t4], [t10]).
place(x3, [t10,t9,t7], [t4,t3,t1]).
place(x8, [t5], [t11]).
place(x9, [t6], [t12]).
place(x4, [t12,t11,t8], [t6,t5,t2]).
place(x10, [t7], [t14,t13]).
place(x13, [t14], [t5]).
place(x14, [t15], [t4]).
place(x11, [t8], [t16,t15]).
place(x12, [t13], [t19]).
place(x15, [t16], [t22]).
place(x18, [t17], [t23]).
place(x21, [t18], [t24]).
place(x22, [t19], [t25]).
place(x23, [t20], [t26]).
place(x19, [t26,t25,t23], [t20,t19,t17]).
place(x24, [t21], [t27]).
place(x25, [t22], [t28]).
place(x20, [t28,t27,t24], [t22,t21,t18]).
place(x28, [t29], [t3]).
place(x26, [t23], [t30,t29]).
place(x29, [t30], [t21]).
place(x30, [t31], [t20]).
place(x27, [t24], [t32,t31]).
place(x31, [t32], [t6]).
place(x0, [init1,t25,t11], [t1]).
place(x1, [init2,t28,t10], [t2]).
place(x16, [init3,t27,t9], [t17]).
place(x17, [init4,t26,t12], [t18]).

transition(t1, [x0,x3], [x2]).
transition(t2, [x1,x4], [x5]).
transition(t3, [x3,x28], [x6]).
transition(t4, [x3,x14], [x7]).
transition(t5, [x4,x13], [x8]).
transition(t6, [x4,x31], [x9]).
transition(t7, [x2], [x3,x10]).
transition(t8, [x5], [x4,x11]).
transition(t9, [x6], [x3,x16]).
transition(t10, [x7], [x1,x3]).
transition(t11, [x8], [x0,x4]).
transition(t12, [x9], [x4,x17]).
transition(t13, [x10], [x12]).
transition(t14, [x10], [x13]).
transition(t15, [x11], [x14]).
transition(t16, [x11], [x15]).
transition(t17, [x16,x19], [x18]).
transition(t18, [x17,x20], [x21]).
transition(t19, [x12,x19], [x22]).
transition(t20, [x19,x30], [x23]).
transition(t21, [x20,x29], [x24]).
transition(t22, [x15,x20], [x25]).
transition(t23, [x18], [x19,x26]).
transition(t24, [x21], [x20,x27]).
transition(t25, [x22], [x0,x19]).
transition(t26, [x23], [x17,x19]).
transition(t27, [x24], [x16,x20]).
transition(t28, [x25], [x1,x20]).
transition(t29, [x26], [x28]).
transition(t30, [x26], [x29]).
transition(t31, [x27], [x30]).
transition(t32, [x27], [x31]).
transition(init1, [], [x0]).
transition(init2, [], [x1]).
transition(init3, [], [x16]).
transition(init4, [], [x17]).

weight(x0, t1, 1).
weight(x3, t1, 1).
weight(t1, x2, 1).
weight(x1, t2, 1).
weight(x4, t2, 1).
weight(t2, x5, 1).
weight(x3, t3, 1).
weight(x28, t3, 1).
weight(t3, x6, 1).
weight(x3, t4, 1).
weight(x14, t4, 1).
weight(t4, x7, 1).
weight(x4, t5, 1).
weight(x13, t5, 1).
weight(t5, x8, 1).
weight(x4, t6, 1).
weight(x31, t6, 1).
weight(t6, x9, 1).
weight(x2, t7, 1).
weight(t7, x3, 1).
weight(t7, x10, 1).
weight(x5, t8, 1).
weight(t8, x4, 1).
weight(t8, x11, 1).
weight(x6, t9, 1).
weight(t9, x3, 1).
weight(t9, x16, 1).
weight(x7, t10, 1).
weight(t10, x1, 1).
weight(t10, x3, 1).
weight(x8, t11, 1).
weight(t11, x0, 1).
weight(t11, x4, 1).
weight(x9, t12, 1).
weight(t12, x4, 1).
weight(t12, x17, 1).
weight(x10, t13, 1).
weight(t13, x12, 1).
weight(x10, t14, 1).
weight(t14, x13, 1).
weight(x11, t15, 1).
weight(t15, x14, 1).
weight(x11, t16, 1).
weight(t16, x15, 1).
weight(x16, t17, 1).
weight(x19, t17, 1).
weight(t17, x18, 1).
weight(x17, t18, 1).
weight(x20, t18, 1).
weight(t18, x21, 1).
weight(x12, t19, 1).
weight(x19, t19, 1).
weight(t19, x22, 1).
weight(x19, t20, 1).
weight(x30, t20, 1).
weight(t20, x23, 1).
weight(x20, t21, 1).
weight(x29, t21, 1).
weight(t21, x24, 1).
weight(x15, t22, 1).
weight(x20, t22, 1).
weight(t22, x25, 1).
weight(x18, t23, 1).
weight(t23, x19, 1).
weight(t23, x26, 1).
weight(x21, t24, 1).
weight(t24, x20, 1).
weight(t24, x27, 1).
weight(x22, t25, 1).
weight(t25, x0, 1).
weight(t25, x19, 1).
weight(x23, t26, 1).
weight(t26, x17, 1).
weight(t26, x19, 1).
weight(x24, t27, 1).
weight(t27, x16, 1).
weight(t27, x20, 1).
weight(x25, t28, 1).
weight(t28, x1, 1).
weight(t28, x20, 1).
weight(x26, t29, 1).
weight(t29, x28, 1).
weight(x26, t30, 1).
weight(t30, x29, 1).
weight(x27, t31, 1).
weight(t31, x30, 1).
weight(x27, t32, 1).
weight(t32, x31, 1).
weight(init1, x0, 1).
weight(init2, x1, 1).
weight(init3, x16, 1).
weight(init4, x17, 1).

init(x0, 1).
init(x1, 1).
init(x3, 1).
init(x4, 1).
init(x16, 1).
init(x17, 1).
init(x19, 1).
init(x20, 1).

cond('(>= x2 1)').
cond('(>= x7 1)').

target(x2, 1).
target(x7, 1).


* Constructing constraints C' for petri net N
(declare-fun x2 () Real)
(declare-fun x5 () Real)
(declare-fun x6 () Real)
(declare-fun x7 () Real)
(declare-fun x3 () Real)
(declare-fun x8 () Real)
(declare-fun x9 () Real)
(declare-fun x4 () Real)
(declare-fun x10 () Real)
(declare-fun x13 () Real)
(declare-fun x14 () Real)
(declare-fun x11 () Real)
(declare-fun x12 () Real)
(declare-fun x15 () Real)
(declare-fun x18 () Real)
(declare-fun x21 () Real)
(declare-fun x22 () Real)
(declare-fun x23 () Real)
(declare-fun x19 () Real)
(declare-fun x24 () Real)
(declare-fun x25 () Real)
(declare-fun x20 () Real)
(declare-fun x28 () Real)
(declare-fun x26 () Real)
(declare-fun x29 () Real)
(declare-fun x30 () Real)
(declare-fun x27 () Real)
(declare-fun x31 () Real)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x16 () Real)
(declare-fun x17 () Real)
(assert (>= 0 (+ (- x0) x2 (- x3))))
(assert (>= 0 (+ (- x1) (- x4) x5)))
(assert (>= 0 (+ (- x28) (- x3) x6)))
(assert (>= 0 (+ (- x14) (- x3) x7)))
(assert (>= 0 (+ (- x13) (- x4) x8)))
(assert (>= 0 (+ (- x31) (- x4) x9)))
(assert (>= 0 (+ x10 (- x2) x3)))
(assert (>= 0 (+ x11 x4 (- x5))))
(assert (>= 0 (+ x16 x3 (- x6))))
(assert (>= 0 (+ x1 x3 (- x7))))
(assert (>= 0 (+ x0 x4 (- x8))))
(assert (>= 0 (+ x17 x4 (- x9))))
(assert (>= 0 (+ (- x10) x12)))
(assert (>= 0 (+ (- x10) x13)))
(assert (>= 0 (+ (- x11) x14)))
(assert (>= 0 (+ (- x11) x15)))
(assert (>= 0 (+ (- x16) x18 (- x19))))
(assert (>= 0 (+ (- x17) (- x20) x21)))
(assert (>= 0 (+ (- x12) (- x19) x22)))
(assert (>= 0 (+ (- x19) x23 (- x30))))
(assert (>= 0 (+ (- x20) x24 (- x29))))
(assert (>= 0 (+ (- x15) (- x20) x25)))
(assert (>= 0 (+ (- x18) x19 x26)))
(assert (>= 0 (+ x20 (- x21) x27)))
(assert (>= 0 (+ x0 x19 (- x22))))
(assert (>= 0 (+ x17 x19 (- x23))))
(assert (>= 0 (+ x16 x20 (- x24))))
(assert (>= 0 (+ x1 x20 (- x25))))
(assert (>= 0 (+ (- x26) x28)))
(assert (>= 0 (+ (- x26) x29)))
(assert (>= 0 (+ (- x27) x30)))
(assert (>= 0 (+ (- x27) x31)))
(assert (>= 0 (+ x0)))
(assert (>= 0 (+ x1)))
(assert (>= 0 (+ x16)))
(assert (>= 0 (+ x17)))
(assert (= 1 (+ 0 x2 x7 (- x3) (- x4) (- x19) (- x20) (- x0) (- x1) (- x16) (- x17))))
(assert (>= x2 0))
(assert (>= x5 0))
(assert (>= x6 0))
(assert (>= x7 0))
(assert (>= x3 0))
(assert (>= x8 0))
(assert (>= x9 0))
(assert (>= x4 0))
(assert (>= x10 0))
(assert (>= x13 0))
(assert (>= x14 0))
(assert (>= x11 0))
(assert (>= x12 0))
(assert (>= x15 0))
(assert (>= x18 0))
(assert (>= x21 0))
(assert (>= x22 0))
(assert (>= x23 0))
(assert (>= x19 0))
(assert (>= x24 0))
(assert (>= x25 0))
(assert (>= x20 0))
(assert (>= x28 0))
(assert (>= x26 0))
(assert (>= x29 0))
(assert (>= x30 0))
(assert (>= x27 0))
(assert (>= x31 0))
(assert (>= x0 0))
(assert (>= x1 0))
(assert (>= x16 0))
(assert (>= x17 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun x20 () Real
    0.0)
  (define-fun x11 () Real
    0.0)
  (define-fun x22 () Real
    0.0)
  (define-fun x17 () Real
    0.0)
  (define-fun x9 () Real
    0.0)
  (define-fun x0 () Real
    0.0)
  (define-fun x2 () Real
    1.0)
  (define-fun x24 () Real
    0.0)
  (define-fun x21 () Real
    0.0)
  (define-fun x18 () Real
    0.0)
  (define-fun x30 () Real
    0.0)
  (define-fun x19 () Real
    0.0)
  (define-fun x12 () Real
    0.0)
  (define-fun x15 () Real
    0.0)
  (define-fun x27 () Real
    0.0)
  (define-fun x13 () Real
    0.0)
  (define-fun x16 () Real
    0.0)
  (define-fun x23 () Real
    0.0)
  (define-fun x25 () Real
    0.0)
  (define-fun x28 () Real
    0.0)
  (define-fun x14 () Real
    0.0)
  (define-fun x8 () Real
    0.0)
  (define-fun x26 () Real
    0.0)
  (define-fun x1 () Real
    0.0)
  (define-fun x6 () Real
    1.0)
  (define-fun x10 () Real
    0.0)
  (define-fun x31 () Real
    0.0)
  (define-fun x29 () Real
    0.0)
  (define-fun x3 () Real
    1.0)
  (define-fun x4 () Real
    0.0)
  (define-fun x5 () Real
    0.0)
  (define-fun x7 () Real
    1.0)
)
- sat, getting model A' for C'
assignment('x20', 0.0).
assignment('x11', 0.0).
assignment('x22', 0.0).
assignment('x17', 0.0).
assignment('x9', 0.0).
assignment('x0', 0.0).
assignment('x2', 1.0).
assignment('x24', 0.0).
assignment('x21', 0.0).
assignment('x18', 0.0).
assignment('x30', 0.0).
assignment('x19', 0.0).
assignment('x12', 0.0).
assignment('x15', 0.0).
assignment('x27', 0.0).
assignment('x13', 0.0).
assignment('x16', 0.0).
assignment('x23', 0.0).
assignment('x25', 0.0).
assignment('x28', 0.0).
assignment('x14', 0.0).
assignment('x8', 0.0).
assignment('x26', 0.0).
assignment('x1', 0.0).
assignment('x6', 1.0).
assignment('x10', 0.0).
assignment('x31', 0.0).
assignment('x29', 0.0).
assignment('x3', 1.0).
assignment('x4', 0.0).
assignment('x5', 0.0).
assignment('x7', 1.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ x2 x6 x7 x3)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ x2 x6 x7 x3)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


