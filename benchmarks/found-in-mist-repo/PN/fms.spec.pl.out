PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/fms.spec.pl]

* Constructing petri net N from input file
place(x5, [t1], [t5]).
place(x2, [t6], [t2]).
place(x6, [t2], [t7]).
place(x7, [t3], [t8]).
place(x8, [t4], [t9]).
place(x10, [t5], [t10]).
place(x9, [t10], [t5]).
place(x11, [t7], [t11]).
place(x12, [t12], [t2]).
place(x13, [t8], [t13]).
place(x14, [t13,t9], [t9,t8]).
place(x15, [t9], [t14]).
place(x16, [t10], [t15,t6]).
place(x18, [t11], [t16]).
place(x17, [t16], [t11]).
place(x19, [t13], [t17,t12]).
place(x20, [t15], [t18]).
place(x21, [t16], [t19]).
place(x22, [t17], [t20]).
place(x1, [init1,t19,t18], [t1]).
place(x3, [init2,t20,t19], [t3]).
place(x4, [init3,t14], [t4]).

transition(t1, [x1], [x5]).
transition(t2, [x2,x12], [x6]).
transition(t3, [x3], [x7]).
transition(t4, [x4], [x8]).
transition(t5, [x5,x9], [x10]).
transition(t6, [x16], [x2]).
transition(t7, [x6], [x11]).
transition(t8, [x7,x14], [x13]).
transition(t9, [x8,x14], [x14,x15]).
transition(t10, [x10], [x9,x16]).
transition(t11, [x11,x17], [x18]).
transition(t12, [x19], [x12]).
transition(t13, [x13], [x14,x19]).
transition(t14, [x15], [x4]).
transition(t15, [x16], [x20]).
transition(t16, [x18], [x17,x21]).
transition(t17, [x19], [x22]).
transition(t18, [x20], [x1]).
transition(t19, [x21], [x1,x3]).
transition(t20, [x22], [x3]).
transition(init1, [], [x1]).
transition(init2, [], [x3]).
transition(init3, [], [x4]).

weight(x1, t1, 1).
weight(t1, x5, 1).
weight(x2, t2, 1).
weight(x12, t2, 1).
weight(t2, x6, 1).
weight(x3, t3, 1).
weight(t3, x7, 1).
weight(x4, t4, 1).
weight(t4, x8, 1).
weight(x5, t5, 1).
weight(x9, t5, 1).
weight(t5, x10, 1).
weight(x16, t6, 1).
weight(t6, x2, 1).
weight(x6, t7, 1).
weight(t7, x11, 1).
weight(x7, t8, 1).
weight(x14, t8, 1).
weight(t8, x13, 1).
weight(x8, t9, 1).
weight(x14, t9, 1).
weight(t9, x14, 1).
weight(t9, x15, 1).
weight(x10, t10, 1).
weight(t10, x9, 1).
weight(t10, x16, 1).
weight(x11, t11, 1).
weight(x17, t11, 1).
weight(t11, x18, 1).
weight(x19, t12, 1).
weight(t12, x12, 1).
weight(x13, t13, 1).
weight(t13, x14, 1).
weight(t13, x19, 1).
weight(x15, t14, 1).
weight(t14, x4, 1).
weight(x16, t15, 1).
weight(t15, x20, 1).
weight(x18, t16, 1).
weight(t16, x17, 1).
weight(t16, x21, 1).
weight(x19, t17, 1).
weight(t17, x22, 1).
weight(x20, t18, 1).
weight(t18, x1, 1).
weight(x21, t19, 1).
weight(t19, x1, 1).
weight(t19, x3, 1).
weight(x22, t20, 1).
weight(t20, x3, 1).
weight(init1, x1, 1).
weight(init2, x3, 1).
weight(init3, x4, 1).

init(x1, 1).
init(x3, 1).
init(x4, 1).
init(x9, 3).
init(x14, 1).
init(x17, 2).

cond('(>= x13 2)').

target(x13, 2).


* Constructing constraints C' for petri net N
(declare-fun x5 () Real)
(declare-fun x2 () Real)
(declare-fun x6 () Real)
(declare-fun x7 () Real)
(declare-fun x8 () Real)
(declare-fun x10 () Real)
(declare-fun x9 () Real)
(declare-fun x11 () Real)
(declare-fun x12 () Real)
(declare-fun x13 () Real)
(declare-fun x14 () Real)
(declare-fun x15 () Real)
(declare-fun x16 () Real)
(declare-fun x18 () Real)
(declare-fun x17 () Real)
(declare-fun x19 () Real)
(declare-fun x20 () Real)
(declare-fun x21 () Real)
(declare-fun x22 () Real)
(declare-fun x1 () Real)
(declare-fun x3 () Real)
(declare-fun x4 () Real)
(assert (>= 0 (+ (- x1) x5)))
(assert (>= 0 (+ (- x12) (- x2) x6)))
(assert (>= 0 (+ (- x3) x7)))
(assert (>= 0 (+ (- x4) x8)))
(assert (>= 0 (+ x10 (- x5) (- x9))))
(assert (>= 0 (+ (- x16) x2)))
(assert (>= 0 (+ x11 (- x6))))
(assert (>= 0 (+ x13 (- x14) (- x7))))
(assert (>= 0 (+ x15 (- x8))))
(assert (>= 0 (+ (- x10) x16 x9)))
(assert (>= 0 (+ (- x11) (- x17) x18)))
(assert (>= 0 (+ x12 (- x19))))
(assert (>= 0 (+ (- x13) x14 x19)))
(assert (>= 0 (+ (- x15) x4)))
(assert (>= 0 (+ (- x16) x20)))
(assert (>= 0 (+ x17 (- x18) x21)))
(assert (>= 0 (+ (- x19) x22)))
(assert (>= 0 (+ x1 (- x20))))
(assert (>= 0 (+ x1 (- x21) x3)))
(assert (>= 0 (+ (- x22) x3)))
(assert (>= 0 (+ x1)))
(assert (>= 0 (+ x3)))
(assert (>= 0 (+ x4)))
(assert (= 1 (+ 0 (* -3 x9) (* 2 x13) (- x14) (* -2 x17) (- x1) (- x3) (- x4))))
(assert (>= x5 0))
(assert (>= x2 0))
(assert (>= x6 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x10 0))
(assert (>= x9 0))
(assert (>= x11 0))
(assert (>= x12 0))
(assert (>= x13 0))
(assert (>= x14 0))
(assert (>= x15 0))
(assert (>= x16 0))
(assert (>= x18 0))
(assert (>= x17 0))
(assert (>= x19 0))
(assert (>= x20 0))
(assert (>= x21 0))
(assert (>= x22 0))
(assert (>= x1 0))
(assert (>= x3 0))
(assert (>= x4 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun x11 () Real
    0.0)
  (define-fun x20 () Real
    0.0)
  (define-fun x22 () Real
    0.0)
  (define-fun x17 () Real
    0.0)
  (define-fun x9 () Real
    0.0)
  (define-fun x13 () Real
    1.0)
  (define-fun x16 () Real
    0.0)
  (define-fun x8 () Real
    0.0)
  (define-fun x14 () Real
    1.0)
  (define-fun x2 () Real
    0.0)
  (define-fun x1 () Real
    0.0)
  (define-fun x6 () Real
    0.0)
  (define-fun x10 () Real
    0.0)
  (define-fun x21 () Real
    0.0)
  (define-fun x18 () Real
    0.0)
  (define-fun x3 () Real
    0.0)
  (define-fun x12 () Real
    0.0)
  (define-fun x15 () Real
    0.0)
  (define-fun x19 () Real
    0.0)
  (define-fun x4 () Real
    0.0)
  (define-fun x5 () Real
    0.0)
  (define-fun x7 () Real
    0.0)
)
- sat, getting model A' for C'
assignment('x11', 0.0).
assignment('x20', 0.0).
assignment('x22', 0.0).
assignment('x17', 0.0).
assignment('x9', 0.0).
assignment('x13', 1.0).
assignment('x16', 0.0).
assignment('x8', 0.0).
assignment('x14', 1.0).
assignment('x2', 0.0).
assignment('x1', 0.0).
assignment('x6', 0.0).
assignment('x10', 0.0).
assignment('x21', 0.0).
assignment('x18', 0.0).
assignment('x3', 0.0).
assignment('x12', 0.0).
assignment('x15', 0.0).
assignment('x19', 0.0).
assignment('x4', 0.0).
assignment('x5', 0.0).
assignment('x7', 0.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ x13 x14)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ x13 x14)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


