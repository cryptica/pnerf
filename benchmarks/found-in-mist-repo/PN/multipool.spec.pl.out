PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/multipool.spec.pl]

* Constructing petri net N from input file
place(x2, [t1], [t3]).
place(x3, [t3], [t4]).
place(x5, [t2], [t6]).
place(x4, [t6], [t5]).
place(x6, [t9], [t7,t3]).
place(x8, [t11], [t8,t6]).
place(x9, [t10], [t13,t12,t11,t9]).
place(x10, [t12], [t16,t14]).
place(x13, [t16], [t17]).
place(x7, [t18,t17,t15,t14,t8,t7,t5,t4], [t10]).
place(x11, [t13], [t19,t15]).
place(x14, [t19], [t18]).
place(x12, [t20], [t16]).
place(x15, [t21], [t19]).
place(x0, [init1,t4], [t1]).
place(x1, [init2,t5], [t2]).
place(x16, [init3,t17], [t20]).
place(x17, [init4,t18], [t21]).

transition(t1, [x0], [x2]).
transition(t2, [x1], [x5]).
transition(t3, [x2,x6], [x3]).
transition(t4, [x3], [x0,x7]).
transition(t5, [x4], [x1,x7]).
transition(t6, [x5,x8], [x4]).
transition(t7, [x6], [x7]).
transition(t8, [x8], [x7]).
transition(t9, [x9], [x6]).
transition(t10, [x7], [x9]).
transition(t11, [x9], [x8]).
transition(t12, [x9], [x10]).
transition(t13, [x9], [x11]).
transition(t14, [x10], [x7]).
transition(t15, [x11], [x7]).
transition(t16, [x10,x12], [x13]).
transition(t17, [x13], [x7,x16]).
transition(t18, [x14], [x7,x17]).
transition(t19, [x11,x15], [x14]).
transition(t20, [x16], [x12]).
transition(t21, [x17], [x15]).
transition(init1, [], [x0]).
transition(init2, [], [x1]).
transition(init3, [], [x16]).
transition(init4, [], [x17]).

weight(x0, t1, 1).
weight(t1, x2, 1).
weight(x1, t2, 1).
weight(t2, x5, 1).
weight(x2, t3, 1).
weight(x6, t3, 1).
weight(t3, x3, 1).
weight(x3, t4, 1).
weight(t4, x0, 1).
weight(t4, x7, 1).
weight(x4, t5, 1).
weight(t5, x1, 1).
weight(t5, x7, 1).
weight(x5, t6, 1).
weight(x8, t6, 1).
weight(t6, x4, 1).
weight(x6, t7, 1).
weight(t7, x7, 1).
weight(x8, t8, 1).
weight(t8, x7, 1).
weight(x9, t9, 1).
weight(t9, x6, 1).
weight(x7, t10, 1).
weight(t10, x9, 1).
weight(x9, t11, 1).
weight(t11, x8, 1).
weight(x9, t12, 1).
weight(t12, x10, 1).
weight(x9, t13, 1).
weight(t13, x11, 1).
weight(x10, t14, 1).
weight(t14, x7, 1).
weight(x11, t15, 1).
weight(t15, x7, 1).
weight(x10, t16, 1).
weight(x12, t16, 1).
weight(t16, x13, 1).
weight(x13, t17, 1).
weight(t17, x7, 1).
weight(t17, x16, 1).
weight(x14, t18, 1).
weight(t18, x7, 1).
weight(t18, x17, 1).
weight(x11, t19, 1).
weight(x15, t19, 1).
weight(t19, x14, 1).
weight(x16, t20, 1).
weight(t20, x12, 1).
weight(x17, t21, 1).
weight(t21, x15, 1).
weight(init1, x0, 1).
weight(init2, x1, 1).
weight(init3, x16, 1).
weight(init4, x17, 1).

init(x0, 1).
init(x1, 1).
init(x7, 3).
init(x16, 1).
init(x17, 1).

cond('(>= x3 1)').
cond('(>= x4 1)').
cond('(>= x13 1)').
cond('(>= x14 1)').

target(x3, 1).
target(x4, 1).
target(x13, 1).
target(x14, 1).


* Constructing constraints C' for petri net N
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(declare-fun x5 () Real)
(declare-fun x4 () Real)
(declare-fun x6 () Real)
(declare-fun x8 () Real)
(declare-fun x9 () Real)
(declare-fun x10 () Real)
(declare-fun x13 () Real)
(declare-fun x7 () Real)
(declare-fun x11 () Real)
(declare-fun x14 () Real)
(declare-fun x12 () Real)
(declare-fun x15 () Real)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x16 () Real)
(declare-fun x17 () Real)
(assert (>= 0 (+ (- x0) x2)))
(assert (>= 0 (+ (- x1) x5)))
(assert (>= 0 (+ (- x2) x3 (- x6))))
(assert (>= 0 (+ x0 (- x3) x7)))
(assert (>= 0 (+ x1 (- x4) x7)))
(assert (>= 0 (+ x4 (- x5) (- x8))))
(assert (>= 0 (+ (- x6) x7)))
(assert (>= 0 (+ x7 (- x8))))
(assert (>= 0 (+ x6 (- x9))))
(assert (>= 0 (+ (- x7) x9)))
(assert (>= 0 (+ x8 (- x9))))
(assert (>= 0 (+ x10 (- x9))))
(assert (>= 0 (+ x11 (- x9))))
(assert (>= 0 (+ (- x10) x7)))
(assert (>= 0 (+ (- x11) x7)))
(assert (>= 0 (+ (- x10) (- x12) x13)))
(assert (>= 0 (+ (- x13) x16 x7)))
(assert (>= 0 (+ (- x14) x17 x7)))
(assert (>= 0 (+ (- x11) x14 (- x15))))
(assert (>= 0 (+ x12 (- x16))))
(assert (>= 0 (+ x15 (- x17))))
(assert (>= 0 (+ x0)))
(assert (>= 0 (+ x1)))
(assert (>= 0 (+ x16)))
(assert (>= 0 (+ x17)))
(assert (= 1 (+ 0 x3 x4 x13 (* -3 x7) x14 (- x0) (- x1) (- x16) (- x17))))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x5 0))
(assert (>= x4 0))
(assert (>= x6 0))
(assert (>= x8 0))
(assert (>= x9 0))
(assert (>= x10 0))
(assert (>= x13 0))
(assert (>= x7 0))
(assert (>= x11 0))
(assert (>= x14 0))
(assert (>= x12 0))
(assert (>= x15 0))
(assert (>= x0 0))
(assert (>= x1 0))
(assert (>= x16 0))
(assert (>= x17 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun x7 () Real
    1.0)
  (define-fun x11 () Real
    1.0)
  (define-fun x13 () Real
    1.0)
  (define-fun x16 () Real
    0.0)
  (define-fun x17 () Real
    0.0)
  (define-fun x9 () Real
    1.0)
  (define-fun x14 () Real
    1.0)
  (define-fun x8 () Real
    1.0)
  (define-fun x2 () Real
    0.0)
  (define-fun x1 () Real
    0.0)
  (define-fun x6 () Real
    1.0)
  (define-fun x10 () Real
    1.0)
  (define-fun x3 () Real
    1.0)
  (define-fun x12 () Real
    0.0)
  (define-fun x15 () Real
    0.0)
  (define-fun x4 () Real
    1.0)
  (define-fun x5 () Real
    0.0)
  (define-fun x0 () Real
    0.0)
)
- sat, getting model A' for C'
assignment('x7', 1.0).
assignment('x11', 1.0).
assignment('x13', 1.0).
assignment('x16', 0.0).
assignment('x17', 0.0).
assignment('x9', 1.0).
assignment('x14', 1.0).
assignment('x8', 1.0).
assignment('x2', 0.0).
assignment('x1', 0.0).
assignment('x6', 1.0).
assignment('x10', 1.0).
assignment('x3', 1.0).
assignment('x12', 0.0).
assignment('x15', 0.0).
assignment('x4', 1.0).
assignment('x5', 0.0).
assignment('x0', 0.0).
- constructing invariant I for petri net N and model A'
(assert (>= 3.0 (+ x3 x4 x6 x8 x9 x10 x13 x7 x11 x14)))

* Invariant I for the petri net:
(assert (>= 3.0 (+ x3 x4 x6 x8 x9 x10 x13 x7 x11 x14)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


