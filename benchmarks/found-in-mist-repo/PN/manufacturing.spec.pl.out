PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/manufacturing.spec.pl]

* Constructing petri net N from input file
place(x7, [t1], []).
place(x8, [t2], []).
place(x9, [t3], []).
place(x4, [t2,t1], [t4]).
place(x5, [t3], [t4]).
place(x10, [t4], []).
place(x11, [t5], []).
place(x6, [t5,t4], [t6]).
place(x0, [t6], [t1]).
place(x1, [t6], [t2]).
place(x2, [t6], [t3]).
place(x3, [t6], [t5]).
place(x12, [t6], []).

transition(t1, [x0], [x4,x7]).
transition(t2, [x1], [x4,x8]).
transition(t3, [x2], [x5,x9]).
transition(t4, [x4,x5], [x6,x10]).
transition(t5, [x3], [x6,x11]).
transition(t6, [x6], [x0,x1,x2,x3,x12]).

weight(x0, t1, 2).
weight(t1, x4, 2).
weight(t1, x7, 1).
weight(x1, t2, 1).
weight(t2, x4, 1).
weight(t2, x8, 1).
weight(x2, t3, 1).
weight(t3, x5, 1).
weight(t3, x9, 1).
weight(x4, t4, 4).
weight(x5, t4, 1).
weight(t4, x6, 1).
weight(t4, x10, 1).
weight(x3, t5, 1).
weight(t5, x6, 1).
weight(t5, x11, 1).
weight(x6, t6, 2).
weight(t6, x0, 3).
weight(t6, x1, 1).
weight(t6, x2, 1).
weight(t6, x3, 1).
weight(t6, x12, 1).

cond('(>= x7 3)').
cond('(>= x8 2)').
cond('(>= x9 2)').
cond('(>= x10 2)').
cond('(>= x11 2)').
cond('(>= x12 2)').

target(x7, 3).
target(x8, 2).
target(x9, 2).
target(x10, 2).
target(x11, 2).
target(x12, 2).


* Constructing constraints C' for petri net N
(declare-fun x7 () Real)
(declare-fun x8 () Real)
(declare-fun x9 () Real)
(declare-fun x4 () Real)
(declare-fun x5 () Real)
(declare-fun x10 () Real)
(declare-fun x11 () Real)
(declare-fun x6 () Real)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(declare-fun x12 () Real)
(assert (>= 0 (+ (* -2 x0) (* 2 x4) x7)))
(assert (>= 0 (+ (- x1) x4 x8)))
(assert (>= 0 (+ (- x2) x5 x9)))
(assert (>= 0 (+ x10 (* -4 x4) (- x5) x6)))
(assert (>= 0 (+ x11 (- x3) x6)))
(assert (>= 0 (+ (* 3 x0) x1 x12 x2 x3 (* -2 x6))))
(assert (= 1 (+ 0 (* 3 x7) (* 2 x8) (* 2 x9) (* 2 x10) (* 2 x11) (* 2 x12))))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x9 0))
(assert (>= x4 0))
(assert (>= x5 0))
(assert (>= x10 0))
(assert (>= x11 0))
(assert (>= x6 0))
(assert (>= x0 0))
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x12 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 35 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


