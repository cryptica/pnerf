PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/PN/basicME.spec.pl]

* Constructing petri net N from input file
place(x3, [t1], [t3]).
place(x2, [t3,t2], [t2,t1]).
place(x4, [t2], [t4]).
place(x1, [t4,t1], [t2,t1]).
place(x0, [init1,t4,t3], [t2,t1]).

transition(t1, [x0,x1,x2], [x1,x3]).
transition(t2, [x0,x1,x2], [x2,x4]).
transition(t3, [x3], [x0,x2]).
transition(t4, [x4], [x0,x1]).
transition(init1, [], [x0]).

weight(x0, t1, 1).
weight(x1, t1, 1).
weight(x2, t1, 1).
weight(t1, x1, 1).
weight(t1, x3, 1).
weight(x0, t2, 1).
weight(x1, t2, 1).
weight(x2, t2, 1).
weight(t2, x2, 1).
weight(t2, x4, 1).
weight(x3, t3, 1).
weight(t3, x0, 1).
weight(t3, x2, 1).
weight(x4, t4, 1).
weight(t4, x0, 1).
weight(t4, x1, 1).
weight(init1, x0, 1).

init(x0, 1).
init(x1, 1).
init(x2, 1).

cond('(>= x3 1)').
cond('(>= x4 1)').
cond('(>= x3 2)').
cond('(>= x4 2)').

target(x3, 1).
target(x4, 1).
target(x3, 2).
target(x4, 2).


* Constructing constraints C' for petri net N
(declare-fun x3 () Real)
(declare-fun x2 () Real)
(declare-fun x4 () Real)
(declare-fun x1 () Real)
(declare-fun x0 () Real)
(assert (>= 0 (+ (- x0) (- x2) x3)))
(assert (>= 0 (+ (- x0) (- x1) x4)))
(assert (>= 0 (+ x0 x2 (- x3))))
(assert (>= 0 (+ x0 x1 (- x4))))
(assert (>= 0 (+ x0)))
(assert (= 1 (+ 0 (* 2 x3) (- x2) (* 2 x4) (- x1) (- x0))))
(assert (>= x3 0))
(assert (>= x2 0))
(assert (>= x4 0))
(assert (>= x1 0))
(assert (>= x0 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun x3 () Real
    0.0)
  (define-fun x2 () Real
    0.0)
  (define-fun x1 () Real
    1.0)
  (define-fun x4 () Real
    1.0)
  (define-fun x0 () Real
    0.0)
)
- sat, getting model A' for C'
assignment('x3', 0.0).
assignment('x2', 0.0).
assignment('x1', 1.0).
assignment('x4', 1.0).
assignment('x0', 0.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ x4 x1)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ x4 x1)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


