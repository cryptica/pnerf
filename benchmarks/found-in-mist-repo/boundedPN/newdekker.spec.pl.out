PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/boundedPN/newdekker.spec.pl]

* Constructing petri net N from input file
place(testturn0, [t3], [t7,t5]).
place(testturn1, [t4], [t8,t6]).
place(at30, [t7], [t9]).
place(at31, [t8], [t10]).
place(at20, [t5,t1], [t11,t3]).
place(at21, [t6,t2], [t12,t4]).
place(cs0, [t11], [t13]).
place(c0eq0, [t4,t1], [t13,t7,t4]).
place(beg0, [t13,t9], [t1]).
place(c0eq1, [t13,t12,t7], [t12,t1]).
place(cs1, [t12], [t14]).
place(c1eq0, [t3,t2], [t14,t8,t3]).
place(turneq1, [t13,t10,t7,t6], [t14,t10,t7,t6]).
place(beg1, [t14,t10], [t2]).
place(c1eq1, [t14,t11,t8], [t11,t2]).
place(turneq0, [t14,t9,t8,t5], [t13,t9,t8,t5]).

transition(t1, [beg0,c0eq1], [c0eq0,at20]).
transition(t2, [beg1,c1eq1], [c1eq0,at21]).
transition(t3, [at20,c1eq0], [c1eq0,testturn0]).
transition(t4, [at21,c0eq0], [c0eq0,testturn1]).
transition(t5, [testturn0,turneq0], [turneq0,at20]).
transition(t6, [testturn1,turneq1], [turneq1,at21]).
transition(t7, [testturn0,c0eq0,turneq1], [turneq1,c0eq1,at30]).
transition(t8, [testturn1,c1eq0,turneq0], [turneq0,c1eq1,at31]).
transition(t9, [at30,turneq0], [turneq0,beg0]).
transition(t10, [at31,turneq1], [turneq1,beg1]).
transition(t11, [at20,c1eq1], [c1eq1,cs0]).
transition(t12, [at21,c0eq1], [c0eq1,cs1]).
transition(t13, [cs0,c0eq0,turneq0], [beg0,c0eq1,turneq1]).
transition(t14, [cs1,c1eq0,turneq1], [beg1,c1eq1,turneq0]).

weight(beg0, t1, 1).
weight(c0eq1, t1, 1).
weight(t1, c0eq0, 1).
weight(t1, at20, 1).
weight(beg1, t2, 1).
weight(c1eq1, t2, 1).
weight(t2, c1eq0, 1).
weight(t2, at21, 1).
weight(at20, t3, 1).
weight(c1eq0, t3, 1).
weight(t3, c1eq0, 1).
weight(t3, testturn0, 1).
weight(at21, t4, 1).
weight(c0eq0, t4, 1).
weight(t4, c0eq0, 1).
weight(t4, testturn1, 1).
weight(testturn0, t5, 1).
weight(turneq0, t5, 1).
weight(t5, turneq0, 1).
weight(t5, at20, 1).
weight(testturn1, t6, 1).
weight(turneq1, t6, 1).
weight(t6, turneq1, 1).
weight(t6, at21, 1).
weight(testturn0, t7, 1).
weight(c0eq0, t7, 1).
weight(turneq1, t7, 1).
weight(t7, turneq1, 1).
weight(t7, c0eq1, 1).
weight(t7, at30, 1).
weight(testturn1, t8, 1).
weight(c1eq0, t8, 1).
weight(turneq0, t8, 1).
weight(t8, turneq0, 1).
weight(t8, c1eq1, 1).
weight(t8, at31, 1).
weight(at30, t9, 1).
weight(turneq0, t9, 1).
weight(t9, turneq0, 1).
weight(t9, beg0, 1).
weight(at31, t10, 1).
weight(turneq1, t10, 1).
weight(t10, turneq1, 1).
weight(t10, beg1, 1).
weight(at20, t11, 1).
weight(c1eq1, t11, 1).
weight(t11, c1eq1, 1).
weight(t11, cs0, 1).
weight(at21, t12, 1).
weight(c0eq1, t12, 1).
weight(t12, c0eq1, 1).
weight(t12, cs1, 1).
weight(cs0, t13, 1).
weight(c0eq0, t13, 1).
weight(turneq0, t13, 1).
weight(t13, beg0, 1).
weight(t13, c0eq1, 1).
weight(t13, turneq1, 1).
weight(cs1, t14, 1).
weight(c1eq0, t14, 1).
weight(turneq1, t14, 1).
weight(t14, beg1, 1).
weight(t14, c1eq1, 1).
weight(t14, turneq0, 1).

init(beg0, 1).
init(beg1, 1).
init(turneq0, 1).
init(c0eq1, 1).
init(c1eq1, 1).

cond('(>= cs0 1)').
cond('(>= cs1 1)').

target(cs0, 1).
target(cs1, 1).


* Constructing constraints C' for petri net N
(declare-fun testturn0 () Real)
(declare-fun testturn1 () Real)
(declare-fun at30 () Real)
(declare-fun at31 () Real)
(declare-fun at20 () Real)
(declare-fun at21 () Real)
(declare-fun cs0 () Real)
(declare-fun c0eq0 () Real)
(declare-fun beg0 () Real)
(declare-fun c0eq1 () Real)
(declare-fun cs1 () Real)
(declare-fun c1eq0 () Real)
(declare-fun turneq1 () Real)
(declare-fun beg1 () Real)
(declare-fun c1eq1 () Real)
(declare-fun turneq0 () Real)
(assert (>= 0 (+ at20 (- beg0) c0eq0 (- c0eq1))))
(assert (>= 0 (+ at21 (- beg1) c1eq0 (- c1eq1))))
(assert (>= 0 (+ (- at20) testturn0)))
(assert (>= 0 (+ (- at21) testturn1)))
(assert (>= 0 (+ at20 (- testturn0))))
(assert (>= 0 (+ at21 (- testturn1))))
(assert (>= 0 (+ at30 (- c0eq0) c0eq1 (- testturn0))))
(assert (>= 0 (+ at31 (- c1eq0) c1eq1 (- testturn1))))
(assert (>= 0 (+ (- at30) beg0)))
(assert (>= 0 (+ (- at31) beg1)))
(assert (>= 0 (+ (- at20) cs0)))
(assert (>= 0 (+ (- at21) cs1)))
(assert (>= 0 (+ beg0 (- c0eq0) c0eq1 (- cs0) (- turneq0) turneq1)))
(assert (>= 0 (+ beg1 (- c1eq0) c1eq1 (- cs1) turneq0 (- turneq1))))
(assert (= 1 (+ 0 cs0 (- beg0) (- c0eq1) cs1 (- beg1) (- c1eq1) (- turneq0))))
(assert (>= testturn0 0))
(assert (>= testturn1 0))
(assert (>= at30 0))
(assert (>= at31 0))
(assert (>= at20 0))
(assert (>= at21 0))
(assert (>= cs0 0))
(assert (>= c0eq0 0))
(assert (>= beg0 0))
(assert (>= c0eq1 0))
(assert (>= cs1 0))
(assert (>= c1eq0 0))
(assert (>= turneq1 0))
(assert (>= beg1 0))
(assert (>= c1eq1 0))
(assert (>= turneq0 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 49 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


