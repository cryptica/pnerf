PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/boundedPN/lamport.spec.pl]

* Constructing petri net N from input file
place(p2, [t1], [t2]).
place(p3, [t2], [t3]).
place(p1, [t3], [t1]).
place(x_eq_0, [t4,t2], [t4,t1]).
place(q1, [t4], [t5]).
place(q2, [t5], [t6]).
place(x_eq_1, [t7,t6,t1], [t7,t6,t2]).
place(q4, [t7], [t8]).
place(y_eq_1, [t8,t5,t3], [t9,t3]).
place(q5, [t8,t6], [t9]).
place(q3, [t9], [t7,t4]).

transition(t1, [p1,x_eq_0], [p2,x_eq_1]).
transition(t2, [p2,x_eq_1], [p3,x_eq_0]).
transition(t3, [p3,y_eq_1], [y_eq_1,p1]).
transition(t4, [x_eq_0,q3], [x_eq_0,q1]).
transition(t5, [q1], [y_eq_1,q2]).
transition(t6, [x_eq_1,q2], [x_eq_1,q5]).
transition(t7, [x_eq_1,q3], [x_eq_1,q4]).
transition(t8, [q4], [y_eq_1,q5]).
transition(t9, [y_eq_1,q5], [q3]).

weight(p1, t1, 1).
weight(x_eq_0, t1, 1).
weight(t1, p2, 1).
weight(t1, x_eq_1, 1).
weight(p2, t2, 1).
weight(x_eq_1, t2, 1).
weight(t2, p3, 1).
weight(t2, x_eq_0, 1).
weight(p3, t3, 1).
weight(y_eq_1, t3, 1).
weight(t3, y_eq_1, 1).
weight(t3, p1, 1).
weight(x_eq_0, t4, 1).
weight(q3, t4, 1).
weight(t4, x_eq_0, 1).
weight(t4, q1, 1).
weight(q1, t5, 1).
weight(t5, y_eq_1, 1).
weight(t5, q2, 1).
weight(x_eq_1, t6, 1).
weight(q2, t6, 1).
weight(t6, x_eq_1, 1).
weight(t6, q5, 1).
weight(x_eq_1, t7, 1).
weight(q3, t7, 1).
weight(t7, x_eq_1, 1).
weight(t7, q4, 1).
weight(q4, t8, 1).
weight(t8, y_eq_1, 1).
weight(t8, q5, 1).
weight(y_eq_1, t9, 1).
weight(q5, t9, 1).
weight(t9, q3, 1).

init(p2, 1).
init(x_eq_1, 1).
init(y_eq_1, 1).
init(q5, 1).

cond('(>= p1 1)').
cond('(>= q4 1)').

target(p1, 1).
target(q4, 1).


* Constructing constraints C' for petri net N
(declare-fun p2 () Real)
(declare-fun p3 () Real)
(declare-fun p1 () Real)
(declare-fun x_eq_0 () Real)
(declare-fun q1 () Real)
(declare-fun q2 () Real)
(declare-fun x_eq_1 () Real)
(declare-fun q4 () Real)
(declare-fun y_eq_1 () Real)
(declare-fun q5 () Real)
(declare-fun q3 () Real)
(assert (>= 0 (+ (- p1) p2 (- x_eq_0) x_eq_1)))
(assert (>= 0 (+ (- p2) p3 x_eq_0 (- x_eq_1))))
(assert (>= 0 (+ p1 (- p3))))
(assert (>= 0 (+ q1 (- q3))))
(assert (>= 0 (+ (- q1) q2 y_eq_1)))
(assert (>= 0 (+ (- q2) q5)))
(assert (>= 0 (+ (- q3) q4)))
(assert (>= 0 (+ (- q4) q5 y_eq_1)))
(assert (>= 0 (+ q3 (- q5) (- y_eq_1))))
(assert (= 1 (+ 0 (- p2) p1 (- x_eq_1) q4 (- y_eq_1) (- q5))))
(assert (>= p2 0))
(assert (>= p3 0))
(assert (>= p1 0))
(assert (>= x_eq_0 0))
(assert (>= q1 0))
(assert (>= q2 0))
(assert (>= x_eq_1 0))
(assert (>= q4 0))
(assert (>= y_eq_1 0))
(assert (>= q5 0))
(assert (>= q3 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 34 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


