PETRINIZER: The checker for Petri Nets
[benchmarks/found-in-mist-repo/boundedPN/lamport.spec.pl]

* Constructing petri net N from input file
place(p2, [t1], [t2]).
place(p3, [t2], [t3]).
place(p1, [t3], [t1]).
place(x_eq_0, [t4,t2], [t4,t1]).
place(q1, [t4], [t5]).
place(q2, [t5], [t6]).
place(x_eq_1, [t7,t6,t1], [t7,t6,t2]).
place(q4, [t7], [t8]).
place(y_eq_1, [t8,t5,t3], [t9,t3]).
place(q5, [t8,t6], [t9]).
place(q3, [t9], [t7,t4]).

transition(t1, [p1,x_eq_0], [p2,x_eq_1]).
transition(t2, [p2,x_eq_1], [p3,x_eq_0]).
transition(t3, [p3,y_eq_1], [y_eq_1,p1]).
transition(t4, [x_eq_0,q3], [x_eq_0,q1]).
transition(t5, [q1], [y_eq_1,q2]).
transition(t6, [x_eq_1,q2], [x_eq_1,q5]).
transition(t7, [x_eq_1,q3], [x_eq_1,q4]).
transition(t8, [q4], [y_eq_1,q5]).
transition(t9, [y_eq_1,q5], [q3]).

init(p2, 1).
init(x_eq_1, 1).
init(y_eq_1, 1).
init(q5, 1).
cond('(>= p1 1)').
cond('(>= q4 1)').


* Constructing constraint C_0 for petri net N
(declare-fun p2 () Int)
(declare-fun p3 () Int)
(declare-fun p1 () Int)
(declare-fun x_eq_0 () Int)
(declare-fun q1 () Int)
(declare-fun q2 () Int)
(declare-fun x_eq_1 () Int)
(declare-fun q4 () Int)
(declare-fun y_eq_1 () Int)
(declare-fun q5 () Int)
(declare-fun q3 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(assert (>= p2 0))
(assert (>= p3 0))
(assert (>= p1 0))
(assert (>= x_eq_0 0))
(assert (>= q1 0))
(assert (>= q2 0))
(assert (>= x_eq_1 0))
(assert (>= q4 0))
(assert (>= y_eq_1 0))
(assert (>= q5 0))
(assert (>= q3 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (= p2 (+ 1 t1 (- t2))))
(assert (= p3 (+ 0 t2 (- t3))))
(assert (= p1 (+ 0 t3 (- t1))))
(assert (= x_eq_0 (+ 0 t2 (- t1))))
(assert (= q1 (+ 0 t4 (- t5))))
(assert (= q2 (+ 0 t5 (- t6))))
(assert (= x_eq_1 (+ 1 t1 (- t2))))
(assert (= q4 (+ 0 t7 (- t8))))
(assert (= y_eq_1 (+ 1 t5 t8 (- t9))))
(assert (= q5 (+ 1 t6 t8 (- t9))))
(assert (= q3 (+ 0 t9 (- t4) (- t7))))
(assert (>= p1 1))
(assert (>= q4 1))
(check-sat)
(get-model)

* Checking SAT(C0)
sat
(model 
  (define-fun t5 () Int
    0)
  (define-fun t2 () Int
    1)
  (define-fun t7 () Int
    1)
  (define-fun t4 () Int
    0)
  (define-fun t9 () Int
    1)
  (define-fun t8 () Int
    0)
  (define-fun t6 () Int
    0)
  (define-fun t1 () Int
    0)
  (define-fun t3 () Int
    1)
  (define-fun q3 () Int
    0)
  (define-fun q5 () Int
    0)
  (define-fun y_eq_1 () Int
    0)
  (define-fun q4 () Int
    1)
  (define-fun x_eq_1 () Int
    0)
  (define-fun q2 () Int
    0)
  (define-fun q1 () Int
    0)
  (define-fun x_eq_0 () Int
    1)
  (define-fun p1 () Int
    1)
  (define-fun p3 () Int
    0)
  (define-fun p2 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t5, 0).
assignment(t2, 1).
assignment(t7, 1).
assignment(t4, 0).
assignment(t9, 1).
assignment(t8, 0).
assignment(t6, 0).
assignment(t1, 0).
assignment(t3, 1).
assignment(q3, 0).
assignment(q5, 0).
assignment(y_eq_1, 0).
assignment(q4, 1).
assignment(x_eq_1, 0).
assignment(q2, 0).
assignment(q1, 0).
assignment(x_eq_0, 1).
assignment(p1, 1).
assignment(p3, 0).
assignment(p2, 0).
- constraints C_theta...
(declare-fun p2 () Bool)
(declare-fun p3 () Bool)
(declare-fun p1 () Bool)
(declare-fun x_eq_0 () Bool)
(declare-fun q1 () Bool)
(declare-fun q2 () Bool)
(declare-fun x_eq_1 () Bool)
(declare-fun q4 () Bool)
(declare-fun y_eq_1 () Bool)
(declare-fun q5 () Bool)
(declare-fun q3 () Bool)

(assert (implies p2 (or p3 x_eq_0)))
(assert (implies p3 (or y_eq_1 p1)))
(assert (implies p1 (or p2 x_eq_1)))
(assert (implies x_eq_0 (and (or x_eq_0 q1) (or p2 x_eq_1))))
(assert (implies q1 (or y_eq_1 q2)))
(assert (implies q2 (or x_eq_1 q5)))
(assert (implies x_eq_1 (and (or x_eq_1 q4) (or x_eq_1 q5) (or p3 x_eq_0))))
(assert (implies q4 (or y_eq_1 q5)))
(assert (implies y_eq_1 (and q3 (or y_eq_1 p1))))
(assert (implies q5 q3))
(assert (implies q3 (and (or x_eq_1 q4) (or x_eq_0 q1))))

(assert (or p2 x_eq_1 y_eq_1 q5))

(assert (not q4))
(assert (not x_eq_0))
(assert (not p1))

(check-sat)
(get-model)

* Checking SAT(C_theta)
sat
(model 
  (define-fun q5 () Bool
    false)
  (define-fun q3 () Bool
    true)
  (define-fun p2 () Bool
    false)
  (define-fun q2 () Bool
    false)
  (define-fun p3 () Bool
    true)
  (define-fun x_eq_1 () Bool
    true)
  (define-fun y_eq_1 () Bool
    true)
  (define-fun q1 () Bool
    true)
  (define-fun p1 () Bool
    false)
  (define-fun x_eq_0 () Bool
    false)
  (define-fun q4 () Bool
    false)
)

* Constructing constraints C_1 for C_0 and A_theta
- model A_theta...
assignment(q5, false).
assignment(q3, true).
assignment(p2, false).
assignment(q2, false).
assignment(p3, true).
assignment(x_eq_1, true).
assignment(y_eq_1, true).
assignment(q1, true).
assignment(p1, false).
assignment(x_eq_0, false).
assignment(q4, false).
- constraint d_1...
(assert (>= (+ q3 p3 x_eq_1 y_eq_1 q1) 1))
- constraints c_1...
(declare-fun p2 () Int)
(declare-fun p3 () Int)
(declare-fun p1 () Int)
(declare-fun x_eq_0 () Int)
(declare-fun q1 () Int)
(declare-fun q2 () Int)
(declare-fun x_eq_1 () Int)
(declare-fun q4 () Int)
(declare-fun y_eq_1 () Int)
(declare-fun q5 () Int)
(declare-fun q3 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(assert (>= p2 0))
(assert (>= p3 0))
(assert (>= p1 0))
(assert (>= x_eq_0 0))
(assert (>= q1 0))
(assert (>= q2 0))
(assert (>= x_eq_1 0))
(assert (>= q4 0))
(assert (>= y_eq_1 0))
(assert (>= q5 0))
(assert (>= q3 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (= p2 (+ 1 t1 (- t2))))
(assert (= p3 (+ 0 t2 (- t3))))
(assert (= p1 (+ 0 t3 (- t1))))
(assert (= x_eq_0 (+ 0 t2 (- t1))))
(assert (= q1 (+ 0 t4 (- t5))))
(assert (= q2 (+ 0 t5 (- t6))))
(assert (= x_eq_1 (+ 1 t1 (- t2))))
(assert (= q4 (+ 0 t7 (- t8))))
(assert (= y_eq_1 (+ 1 t5 t8 (- t9))))
(assert (= q5 (+ 1 t6 t8 (- t9))))
(assert (= q3 (+ 0 t9 (- t4) (- t7))))
(assert (>= p1 1))
(assert (>= q4 1))
(assert (>= (+ q3 p3 x_eq_1 y_eq_1 q1) 1))
(check-sat)
(get-model)
unsat
(error "line 56 column 10: model is not available")

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------

