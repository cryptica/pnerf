PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/boundedPN/read-write.spec.pl]

* Constructing petri net N from input file
place(x0, [t2], [t1]).
place(x1, [t3,t1], [t4,t2]).
place(x2, [t4], [t3]).
place(x3, [t2], [t6]).
place(x6, [t6], [t5]).
place(x4, [t7,t6], [t8,t2]).
place(x5, [t4], [t8]).
place(x7, [t7,t5], [t8,t6]).
place(x8, [t8], [t7]).
place(x9, [t4], [t9]).
place(x10, [t8], [t9]).
place(x11, [t9], [t3]).
place(x12, [t9], [t7]).

transition(t1, [x0], [x1]).
transition(t2, [x1,x4], [x0,x3]).
transition(t3, [x2,x11], [x1]).
transition(t4, [x1], [x2,x5,x9]).
transition(t5, [x6], [x7]).
transition(t6, [x3,x7], [x4,x6]).
transition(t7, [x8,x12], [x4,x7]).
transition(t8, [x4,x5,x7], [x8,x10]).
transition(t9, [x9,x10], [x11,x12]).

weight(x0, t1, 1).
weight(t1, x1, 1).
weight(x1, t2, 1).
weight(x4, t2, 1).
weight(t2, x0, 1).
weight(t2, x3, 1).
weight(x2, t3, 1).
weight(x11, t3, 1).
weight(t3, x1, 1).
weight(x1, t4, 1).
weight(t4, x2, 1).
weight(t4, x5, 1).
weight(t4, x9, 1).
weight(x6, t5, 1).
weight(t5, x7, 1).
weight(x3, t6, 1).
weight(x7, t6, 1).
weight(t6, x4, 1).
weight(t6, x6, 1).
weight(x8, t7, 1).
weight(x12, t7, 1).
weight(t7, x4, 5).
weight(t7, x7, 1).
weight(x4, t8, 5).
weight(x5, t8, 1).
weight(x7, t8, 1).
weight(t8, x8, 1).
weight(t8, x10, 1).
weight(x9, t9, 1).
weight(x10, t9, 1).
weight(t9, x11, 1).
weight(t9, x12, 1).

init(x2, 1).
init(x8, 1).
init(x11, 1).
init(x12, 1).

cond('(>= x3 1)').
cond('(>= x10 1)').

target(x3, 1).
target(x10, 1).


* Constructing constraints C' for petri net N
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(declare-fun x6 () Real)
(declare-fun x4 () Real)
(declare-fun x5 () Real)
(declare-fun x7 () Real)
(declare-fun x8 () Real)
(declare-fun x9 () Real)
(declare-fun x10 () Real)
(declare-fun x11 () Real)
(declare-fun x12 () Real)
(assert (>= 0 (+ (- x0) x1)))
(assert (>= 0 (+ x0 (- x1) x3 (- x4))))
(assert (>= 0 (+ x1 (- x11) (- x2))))
(assert (>= 0 (+ (- x1) x2 x5 x9)))
(assert (>= 0 (+ (- x6) x7)))
(assert (>= 0 (+ (- x3) x4 x6 (- x7))))
(assert (>= 0 (+ (- x12) (* 5 x4) x7 (- x8))))
(assert (>= 0 (+ x10 (* -5 x4) (- x5) (- x7) x8)))
(assert (>= 0 (+ (- x10) x11 x12 (- x9))))
(assert (= 1 (+ 0 (- x2) x3 (- x8) x10 (- x11) (- x12))))
(assert (>= x0 0))
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x6 0))
(assert (>= x4 0))
(assert (>= x5 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x9 0))
(assert (>= x10 0))
(assert (>= x11 0))
(assert (>= x12 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun x11 () Real
    0.0)
  (define-fun x6 () Real
    0.0)
  (define-fun x7 () Real
    0.0)
  (define-fun x9 () Real
    0.0)
  (define-fun x8 () Real
    0.0)
  (define-fun x3 () Real
    1.0)
  (define-fun x2 () Real
    0.0)
  (define-fun x12 () Real
    5.0)
  (define-fun x10 () Real
    5.0)
  (define-fun x1 () Real
    0.0)
  (define-fun x4 () Real
    1.0)
  (define-fun x5 () Real
    0.0)
  (define-fun x0 () Real
    0.0)
)
- sat, getting model A' for C'
assignment('x11', 0.0).
assignment('x6', 0.0).
assignment('x7', 0.0).
assignment('x9', 0.0).
assignment('x8', 0.0).
assignment('x3', 1.0).
assignment('x2', 0.0).
assignment('x12', 5.0).
assignment('x10', 5.0).
assignment('x1', 0.0).
assignment('x4', 1.0).
assignment('x5', 0.0).
assignment('x0', 0.0).
- constructing invariant I for petri net N and model A'
(assert (>= 5.0 (+ x3 x4 (* 5.0 x10) (* 5.0 x12))))

* Invariant I for the petri net:
(assert (>= 5.0 (+ x3 x4 (* 5.0 x10) (* 5.0 x12))))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


