PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/boundedPN/peterson.spec.pl]

* Constructing petri net N from input file
place(x1, [t1], [t3,t2]).
place(x2, [t3,t2], [t5,t4]).
place(x3, [t5,t4], [t6]).
place(x5, [t1], [t6]).
place(x0, [t6], [t1]).
place(x11, [t7], [t9,t8]).
place(x6, [t9,t8,t5], [t9,t5,t2]).
place(x4, [t10,t6], [t10,t1]).
place(x12, [t9,t8], [t11,t10]).
place(x7, [t11,t3,t2], [t11,t8,t3]).
place(x8, [t7], [t12]).
place(x13, [t11,t10], [t12]).
place(x9, [t12,t4], [t7,t4]).
place(x10, [t12], [t7]).

transition(t1, [x0,x4], [x1,x5]).
transition(t2, [x1,x6], [x2,x7]).
transition(t3, [x1,x7], [x7,x2]).
transition(t4, [x2,x9], [x9,x3]).
transition(t5, [x2,x6], [x6,x3]).
transition(t6, [x3,x5], [x0,x4]).
transition(t7, [x9,x10], [x8,x11]).
transition(t8, [x7,x11], [x6,x12]).
transition(t9, [x6,x11], [x6,x12]).
transition(t10, [x4,x12], [x4,x13]).
transition(t11, [x7,x12], [x7,x13]).
transition(t12, [x8,x13], [x9,x10]).

weight(x0, t1, 1).
weight(x4, t1, 1).
weight(t1, x1, 1).
weight(t1, x5, 1).
weight(x1, t2, 1).
weight(x6, t2, 1).
weight(t2, x2, 1).
weight(t2, x7, 1).
weight(x1, t3, 1).
weight(x7, t3, 1).
weight(t3, x7, 1).
weight(t3, x2, 1).
weight(x2, t4, 1).
weight(x9, t4, 1).
weight(t4, x9, 1).
weight(t4, x3, 1).
weight(x2, t5, 1).
weight(x6, t5, 1).
weight(t5, x6, 1).
weight(t5, x3, 1).
weight(x3, t6, 1).
weight(x5, t6, 1).
weight(t6, x0, 1).
weight(t6, x4, 1).
weight(x9, t7, 1).
weight(x10, t7, 1).
weight(t7, x8, 1).
weight(t7, x11, 1).
weight(x7, t8, 1).
weight(x11, t8, 1).
weight(t8, x6, 1).
weight(t8, x12, 1).
weight(x6, t9, 1).
weight(x11, t9, 1).
weight(t9, x6, 1).
weight(t9, x12, 1).
weight(x4, t10, 1).
weight(x12, t10, 1).
weight(t10, x4, 1).
weight(t10, x13, 1).
weight(x7, t11, 1).
weight(x12, t11, 1).
weight(t11, x7, 1).
weight(t11, x13, 1).
weight(x8, t12, 1).
weight(x13, t12, 1).
weight(t12, x9, 1).
weight(t12, x10, 1).

init(x0, 1).
init(x4, 1).
init(x7, 1).
init(x9, 1).
init(x10, 1).

cond('(>= x3 1)').
cond('(>= x13 1)').

target(x3, 1).
target(x13, 1).


* Constructing constraints C' for petri net N
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(declare-fun x5 () Real)
(declare-fun x0 () Real)
(declare-fun x11 () Real)
(declare-fun x6 () Real)
(declare-fun x4 () Real)
(declare-fun x12 () Real)
(declare-fun x7 () Real)
(declare-fun x8 () Real)
(declare-fun x13 () Real)
(declare-fun x9 () Real)
(declare-fun x10 () Real)
(assert (>= 0 (+ (- x0) x1 (- x4) x5)))
(assert (>= 0 (+ (- x1) x2 (- x6) x7)))
(assert (>= 0 (+ (- x1) x2)))
(assert (>= 0 (+ (- x2) x3)))
(assert (>= 0 (+ (- x2) x3)))
(assert (>= 0 (+ x0 (- x3) x4 (- x5))))
(assert (>= 0 (+ (- x10) x11 x8 (- x9))))
(assert (>= 0 (+ (- x11) x12 x6 (- x7))))
(assert (>= 0 (+ (- x11) x12)))
(assert (>= 0 (+ (- x12) x13)))
(assert (>= 0 (+ (- x12) x13)))
(assert (>= 0 (+ x10 (- x13) (- x8) x9)))
(assert (= 1 (+ 0 x3 (- x0) (- x4) (- x7) x13 (- x9) (- x10))))
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x5 0))
(assert (>= x0 0))
(assert (>= x11 0))
(assert (>= x6 0))
(assert (>= x4 0))
(assert (>= x12 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x13 0))
(assert (>= x9 0))
(assert (>= x10 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 43 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


