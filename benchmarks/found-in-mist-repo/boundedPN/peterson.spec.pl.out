PETRINIZER: The checker for Petri Nets
[benchmarks/found-in-mist-repo/boundedPN/peterson.spec.pl]

* Constructing petri net N from input file
place(x1, [t1], [t3,t2]).
place(x2, [t3,t2], [t5,t4]).
place(x3, [t5,t4], [t6]).
place(x5, [t1], [t6]).
place(x0, [t6], [t1]).
place(x11, [t7], [t9,t8]).
place(x6, [t9,t8,t5], [t9,t5,t2]).
place(x4, [t10,t6], [t10,t1]).
place(x12, [t9,t8], [t11,t10]).
place(x7, [t11,t3,t2], [t11,t8,t3]).
place(x8, [t7], [t12]).
place(x13, [t11,t10], [t12]).
place(x9, [t12,t4], [t7,t4]).
place(x10, [t12], [t7]).

transition(t1, [x0,x4], [x1,x5]).
transition(t2, [x1,x6], [x2,x7]).
transition(t3, [x1,x7], [x7,x2]).
transition(t4, [x2,x9], [x9,x3]).
transition(t5, [x2,x6], [x6,x3]).
transition(t6, [x3,x5], [x0,x4]).
transition(t7, [x9,x10], [x8,x11]).
transition(t8, [x7,x11], [x6,x12]).
transition(t9, [x6,x11], [x6,x12]).
transition(t10, [x4,x12], [x4,x13]).
transition(t11, [x7,x12], [x7,x13]).
transition(t12, [x8,x13], [x9,x10]).

init(x0, 1).
init(x4, 1).
init(x7, 1).
init(x9, 1).
init(x10, 1).
cond('(>= x3 1)').
cond('(>= x13 1)').


* Constructing constraint C_0 for petri net N
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x5 () Int)
(declare-fun x0 () Int)
(declare-fun x11 () Int)
(declare-fun x6 () Int)
(declare-fun x4 () Int)
(declare-fun x12 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x13 () Int)
(declare-fun x9 () Int)
(declare-fun x10 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x5 0))
(assert (>= x0 0))
(assert (>= x11 0))
(assert (>= x6 0))
(assert (>= x4 0))
(assert (>= x12 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x13 0))
(assert (>= x9 0))
(assert (>= x10 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (= x1 (+ 0 t1 (- t2) (- t3))))
(assert (= x2 (+ 0 t2 t3 (- t4) (- t5))))
(assert (= x3 (+ 0 t4 t5 (- t6))))
(assert (= x5 (+ 0 t1 (- t6))))
(assert (= x0 (+ 1 t6 (- t1))))
(assert (= x11 (+ 0 t7 (- t8) (- t9))))
(assert (= x6 (+ 0 t8 (- t2))))
(assert (= x4 (+ 1 t6 (- t1))))
(assert (= x12 (+ 0 t8 t9 (- t10) (- t11))))
(assert (= x7 (+ 1 t2 (- t8))))
(assert (= x8 (+ 0 t7 (- t12))))
(assert (= x13 (+ 0 t10 t11 (- t12))))
(assert (= x9 (+ 1 t12 (- t7))))
(assert (= x10 (+ 1 t12 (- t7))))
(assert (>= x3 1))
(assert (>= x13 1))
(check-sat)
(get-model)

* Checking SAT(C0)
sat
(model 
  (define-fun t10 () Int
    1)
  (define-fun t5 () Int
    1)
  (define-fun t2 () Int
    0)
  (define-fun t7 () Int
    1)
  (define-fun t4 () Int
    0)
  (define-fun t12 () Int
    0)
  (define-fun t9 () Int
    1)
  (define-fun t11 () Int
    0)
  (define-fun t8 () Int
    0)
  (define-fun t6 () Int
    0)
  (define-fun t1 () Int
    1)
  (define-fun t3 () Int
    1)
  (define-fun x10 () Int
    0)
  (define-fun x9 () Int
    0)
  (define-fun x13 () Int
    1)
  (define-fun x8 () Int
    1)
  (define-fun x7 () Int
    1)
  (define-fun x12 () Int
    0)
  (define-fun x4 () Int
    0)
  (define-fun x6 () Int
    0)
  (define-fun x11 () Int
    0)
  (define-fun x0 () Int
    0)
  (define-fun x5 () Int
    1)
  (define-fun x3 () Int
    1)
  (define-fun x2 () Int
    0)
  (define-fun x1 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 1).
assignment(t5, 1).
assignment(t2, 0).
assignment(t7, 1).
assignment(t4, 0).
assignment(t12, 0).
assignment(t9, 1).
assignment(t11, 0).
assignment(t8, 0).
assignment(t6, 0).
assignment(t1, 1).
assignment(t3, 1).
assignment(x10, 0).
assignment(x9, 0).
assignment(x13, 1).
assignment(x8, 1).
assignment(x7, 1).
assignment(x12, 0).
assignment(x4, 0).
assignment(x6, 0).
assignment(x11, 0).
assignment(x0, 0).
assignment(x5, 1).
assignment(x3, 1).
assignment(x2, 0).
assignment(x1, 0).

- constraints C_theta...
(declare-fun x1 () Bool)
(declare-fun x2 () Bool)
(declare-fun x3 () Bool)
(declare-fun x5 () Bool)
(declare-fun x0 () Bool)
(declare-fun x11 () Bool)
(declare-fun x6 () Bool)
(declare-fun x4 () Bool)
(declare-fun x12 () Bool)
(declare-fun x7 () Bool)
(declare-fun x8 () Bool)
(declare-fun x13 () Bool)
(declare-fun x9 () Bool)
(declare-fun x10 () Bool)

(assert (implies x1 (and (or x7 x2) (or x2 x7))))
(assert (implies x2 (and (or x6 x3) (or x9 x3))))
(assert (implies x3 (or x0 x4)))
(assert (implies x5 (or x0 x4)))
(assert (implies x0 (or x1 x5)))
(assert (implies x11 (and (or x6 x12) (or x6 x12))))
(assert (implies x6 (and (or x6 x12) (or x6 x3) (or x2 x7))))
(assert (implies x4 (and (or x4 x13) (or x1 x5))))
(assert (implies x12 (and (or x7 x13) (or x4 x13))))
(assert (implies x7 (and (or x7 x13) (or x6 x12) (or x7 x2))))
(assert (implies x8 (or x9 x10)))
(assert (implies x13 (or x9 x10)))
(assert (implies x9 (and (or x8 x11) (or x9 x3))))
(assert (implies x10 (or x8 x11)))

(assert (or x0 x4 x7 x9 x10))

(assert (not x13))
(assert (not x8))
(assert (not x7))
(assert (not x5))
(assert (not x3))

(check-sat)
(get-model)

* Checking SAT(C_theta)
sat
(model 
  (define-fun x0 () Bool
    false)
  (define-fun x9 () Bool
    true)
  (define-fun x2 () Bool
    true)
  (define-fun x1 () Bool
    false)
  (define-fun x6 () Bool
    true)
  (define-fun x4 () Bool
    false)
  (define-fun x10 () Bool
    false)
  (define-fun x11 () Bool
    true)
  (define-fun x3 () Bool
    false)
  (define-fun x5 () Bool
    false)
  (define-fun x7 () Bool
    false)
  (define-fun x8 () Bool
    false)
  (define-fun x13 () Bool
    false)
  (define-fun x12 () Bool
    false)
)

* Constructing constraints C_1 for C_0 and A_theta
- model A_theta...
assignment(x0, false).
assignment(x9, true).
assignment(x2, true).
assignment(x1, false).
assignment(x6, true).
assignment(x4, false).
assignment(x10, false).
assignment(x11, true).
assignment(x3, false).
assignment(x5, false).
assignment(x7, false).
assignment(x8, false).
assignment(x13, false).
assignment(x12, false).

- constraint d_1...
(assert (>= (+ x9 x2 x6 x11) 1))
- constraints c_1...
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x5 () Int)
(declare-fun x0 () Int)
(declare-fun x11 () Int)
(declare-fun x6 () Int)
(declare-fun x4 () Int)
(declare-fun x12 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x13 () Int)
(declare-fun x9 () Int)
(declare-fun x10 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x5 0))
(assert (>= x0 0))
(assert (>= x11 0))
(assert (>= x6 0))
(assert (>= x4 0))
(assert (>= x12 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x13 0))
(assert (>= x9 0))
(assert (>= x10 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (= x1 (+ 0 t1 (- t2) (- t3))))
(assert (= x2 (+ 0 t2 t3 (- t4) (- t5))))
(assert (= x3 (+ 0 t4 t5 (- t6))))
(assert (= x5 (+ 0 t1 (- t6))))
(assert (= x0 (+ 1 t6 (- t1))))
(assert (= x11 (+ 0 t7 (- t8) (- t9))))
(assert (= x6 (+ 0 t8 (- t2))))
(assert (= x4 (+ 1 t6 (- t1))))
(assert (= x12 (+ 0 t8 t9 (- t10) (- t11))))
(assert (= x7 (+ 1 t2 (- t8))))
(assert (= x8 (+ 0 t7 (- t12))))
(assert (= x13 (+ 0 t10 t11 (- t12))))
(assert (= x9 (+ 1 t12 (- t7))))
(assert (= x10 (+ 1 t12 (- t7))))
(assert (>= x3 1))
(assert (>= x13 1))
(assert (>= (+ x9 x2 x6 x11) 1))
(check-sat)
(get-model)
sat
(model 
  (define-fun t10 () Int
    1)
  (define-fun t5 () Int
    1)
  (define-fun t2 () Int
    0)
  (define-fun t7 () Int
    1)
  (define-fun t4 () Int
    0)
  (define-fun t12 () Int
    0)
  (define-fun t9 () Int
    0)
  (define-fun t11 () Int
    0)
  (define-fun t8 () Int
    1)
  (define-fun t6 () Int
    0)
  (define-fun t1 () Int
    1)
  (define-fun t3 () Int
    1)
  (define-fun x10 () Int
    0)
  (define-fun x9 () Int
    0)
  (define-fun x13 () Int
    1)
  (define-fun x8 () Int
    1)
  (define-fun x7 () Int
    0)
  (define-fun x12 () Int
    0)
  (define-fun x4 () Int
    0)
  (define-fun x6 () Int
    1)
  (define-fun x11 () Int
    0)
  (define-fun x0 () Int
    0)
  (define-fun x5 () Int
    1)
  (define-fun x3 () Int
    1)
  (define-fun x2 () Int
    0)
  (define-fun x1 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 1).
assignment(t5, 1).
assignment(t2, 0).
assignment(t7, 1).
assignment(t4, 0).
assignment(t12, 0).
assignment(t9, 0).
assignment(t11, 0).
assignment(t8, 1).
assignment(t6, 0).
assignment(t1, 1).
assignment(t3, 1).
assignment(x10, 0).
assignment(x9, 0).
assignment(x13, 1).
assignment(x8, 1).
assignment(x7, 0).
assignment(x12, 0).
assignment(x4, 0).
assignment(x6, 1).
assignment(x11, 0).
assignment(x0, 0).
assignment(x5, 1).
assignment(x3, 1).
assignment(x2, 0).
assignment(x1, 0).

- constraints C_theta...
(declare-fun x1 () Bool)
(declare-fun x2 () Bool)
(declare-fun x3 () Bool)
(declare-fun x5 () Bool)
(declare-fun x0 () Bool)
(declare-fun x11 () Bool)
(declare-fun x6 () Bool)
(declare-fun x4 () Bool)
(declare-fun x12 () Bool)
(declare-fun x7 () Bool)
(declare-fun x8 () Bool)
(declare-fun x13 () Bool)
(declare-fun x9 () Bool)
(declare-fun x10 () Bool)

(assert (implies x1 (and (or x7 x2) (or x2 x7))))
(assert (implies x2 (and (or x6 x3) (or x9 x3))))
(assert (implies x3 (or x0 x4)))
(assert (implies x5 (or x0 x4)))
(assert (implies x0 (or x1 x5)))
(assert (implies x11 (and (or x6 x12) (or x6 x12))))
(assert (implies x6 (and (or x6 x12) (or x6 x3) (or x2 x7))))
(assert (implies x4 (and (or x4 x13) (or x1 x5))))
(assert (implies x12 (and (or x7 x13) (or x4 x13))))
(assert (implies x7 (and (or x7 x13) (or x6 x12) (or x7 x2))))
(assert (implies x8 (or x9 x10)))
(assert (implies x13 (or x9 x10)))
(assert (implies x9 (and (or x8 x11) (or x9 x3))))
(assert (implies x10 (or x8 x11)))

(assert (or x0 x4 x7 x9 x10))

(assert (not x13))
(assert (not x8))
(assert (not x6))
(assert (not x5))
(assert (not x3))

(check-sat)
(get-model)

* Checking SAT(C_theta)
sat
(model 
  (define-fun x11 () Bool
    false)
  (define-fun x7 () Bool
    true)
  (define-fun x9 () Bool
    false)
  (define-fun x12 () Bool
    true)
  (define-fun x1 () Bool
    true)
  (define-fun x4 () Bool
    true)
  (define-fun x10 () Bool
    false)
  (define-fun x0 () Bool
    false)
  (define-fun x3 () Bool
    false)
  (define-fun x5 () Bool
    false)
  (define-fun x6 () Bool
    false)
  (define-fun x8 () Bool
    false)
  (define-fun x13 () Bool
    false)
  (define-fun x2 () Bool
    false)
)

* Constructing constraints C_2 for C_1 and A_theta
- model A_theta...
assignment(x11, false).
assignment(x7, true).
assignment(x9, false).
assignment(x12, true).
assignment(x1, true).
assignment(x4, true).
assignment(x10, false).
assignment(x0, false).
assignment(x3, false).
assignment(x5, false).
assignment(x6, false).
assignment(x8, false).
assignment(x13, false).
assignment(x2, false).

- constraint d_2...
(assert (>= (+ x7 x12 x1 x4) 1))
- constraints c_2...
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x5 () Int)
(declare-fun x0 () Int)
(declare-fun x11 () Int)
(declare-fun x6 () Int)
(declare-fun x4 () Int)
(declare-fun x12 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x13 () Int)
(declare-fun x9 () Int)
(declare-fun x10 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x5 0))
(assert (>= x0 0))
(assert (>= x11 0))
(assert (>= x6 0))
(assert (>= x4 0))
(assert (>= x12 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x13 0))
(assert (>= x9 0))
(assert (>= x10 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (= x1 (+ 0 t1 (- t2) (- t3))))
(assert (= x2 (+ 0 t2 t3 (- t4) (- t5))))
(assert (= x3 (+ 0 t4 t5 (- t6))))
(assert (= x5 (+ 0 t1 (- t6))))
(assert (= x0 (+ 1 t6 (- t1))))
(assert (= x11 (+ 0 t7 (- t8) (- t9))))
(assert (= x6 (+ 0 t8 (- t2))))
(assert (= x4 (+ 1 t6 (- t1))))
(assert (= x12 (+ 0 t8 t9 (- t10) (- t11))))
(assert (= x7 (+ 1 t2 (- t8))))
(assert (= x8 (+ 0 t7 (- t12))))
(assert (= x13 (+ 0 t10 t11 (- t12))))
(assert (= x9 (+ 1 t12 (- t7))))
(assert (= x10 (+ 1 t12 (- t7))))
(assert (>= x3 1))
(assert (>= x13 1))
(assert (>= (+ x9 x2 x6 x11) 1))
(assert (>= (+ x7 x12 x1 x4) 1))
(check-sat)
(get-model)
unsat
(error "line 72 column 10: model is not available")

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------

