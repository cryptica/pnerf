PETRINIZER: The checker for Petri Nets
[-v benchmarks/found-in-mist-repo/boundedPN/newrtp.spec.pl]

* Constructing petri net N from input file
place(begin, [], [t1]).
place(sc1, [t2], [t3]).
place(oh_ns, [t3], [t5,t4]).
place(point1, [t4], [t6]).
place(oh_a_dt, [t6], [t9,t8,t7]).
place(sc2, [t8], [t10]).
place(sc3, [t9], [t11]).
place(point2, [t11,t10,t7,t5], [t12]).
place(do, [t12,t1], [t2]).

transition(t1, [begin], [do]).
transition(t2, [do], [sc1]).
transition(t3, [sc1], [oh_ns]).
transition(t4, [oh_ns], [point1]).
transition(t5, [oh_ns], [point2]).
transition(t6, [point1], [oh_a_dt]).
transition(t7, [oh_a_dt], [point2]).
transition(t8, [oh_a_dt], [sc2]).
transition(t9, [oh_a_dt], [sc3]).
transition(t10, [sc2], [point2]).
transition(t11, [sc3], [point2]).
transition(t12, [point2], [do]).

weight(begin, t1, 1).
weight(t1, do, 1).
weight(do, t2, 1).
weight(t2, sc1, 1).
weight(sc1, t3, 1).
weight(t3, oh_ns, 1).
weight(oh_ns, t4, 1).
weight(t4, point1, 1).
weight(oh_ns, t5, 1).
weight(t5, point2, 1).
weight(point1, t6, 1).
weight(t6, oh_a_dt, 1).
weight(oh_a_dt, t7, 1).
weight(t7, point2, 1).
weight(oh_a_dt, t8, 1).
weight(t8, sc2, 1).
weight(oh_a_dt, t9, 1).
weight(t9, sc3, 1).
weight(sc2, t10, 1).
weight(t10, point2, 1).
weight(sc3, t11, 1).
weight(t11, point2, 1).
weight(point2, t12, 1).
weight(t12, do, 1).

init(begin, 1).

cond('(>= point1 1)').
cond('(>= point2 1)').

target(point1, 1).
target(point2, 1).


* Constructing constraints C' for petri net N
(declare-fun begin () Real)
(declare-fun sc1 () Real)
(declare-fun oh_ns () Real)
(declare-fun point1 () Real)
(declare-fun oh_a_dt () Real)
(declare-fun sc2 () Real)
(declare-fun sc3 () Real)
(declare-fun point2 () Real)
(declare-fun do () Real)
(assert (>= 0 (+ (- begin) do)))
(assert (>= 0 (+ (- do) sc1)))
(assert (>= 0 (+ oh_ns (- sc1))))
(assert (>= 0 (+ (- oh_ns) point1)))
(assert (>= 0 (+ (- oh_ns) point2)))
(assert (>= 0 (+ oh_a_dt (- point1))))
(assert (>= 0 (+ (- oh_a_dt) point2)))
(assert (>= 0 (+ (- oh_a_dt) sc2)))
(assert (>= 0 (+ (- oh_a_dt) sc3)))
(assert (>= 0 (+ point2 (- sc2))))
(assert (>= 0 (+ point2 (- sc3))))
(assert (>= 0 (+ do (- point2))))
(assert (= 1 (+ 0 (- begin) point1 point2)))
(assert (>= begin 0))
(assert (>= sc1 0))
(assert (>= oh_ns 0))
(assert (>= point1 0))
(assert (>= oh_a_dt 0))
(assert (>= sc2 0))
(assert (>= sc3 0))
(assert (>= point2 0))
(assert (>= do 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun point1 () Real
    1.0)
  (define-fun oh_a_dt () Real
    1.0)
  (define-fun sc2 () Real
    1.0)
  (define-fun sc3 () Real
    1.0)
  (define-fun point2 () Real
    1.0)
  (define-fun oh_ns () Real
    1.0)
  (define-fun begin () Real
    1.0)
  (define-fun do () Real
    1.0)
  (define-fun sc1 () Real
    1.0)
)
- sat, getting model A' for C'
assignment('point1', 1.0).
assignment('oh_a_dt', 1.0).
assignment('sc2', 1.0).
assignment('sc3', 1.0).
assignment('point2', 1.0).
assignment('oh_ns', 1.0).
assignment('begin', 1.0).
assignment('do', 1.0).
assignment('sc1', 1.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ begin sc1 oh_ns point1 oh_a_dt sc2 sc3 point2 do)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ begin sc1 oh_ns point1 oh_a_dt sc2 sc3 point2 do)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


