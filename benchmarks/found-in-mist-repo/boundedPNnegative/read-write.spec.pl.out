PETRINIZER: The checker for Petri Nets
[benchmarks/found-in-mist-repo/boundedPNnegative/read-write.spec.pl]

* Constructing petri net N from input file
place(x0, [t2], [t1]).
place(x1, [t3,t1], [t4,t2]).
place(x2, [t4], [t3]).
place(x3, [t2], [t6]).
place(x6, [t6], [t5]).
place(x4, [(t7,5),t6], [(t8,5),t2]).
place(x5, [t4], [t8]).
place(x7, [t7,t5], [t8,t6]).
place(x8, [t8], [t7]).
place(x9, [t4], [t9]).
place(x10, [t8], [t9]).
place(x11, [t9], [t3]).
place(x12, [t9], [t7]).

transition(t1, [x0], [x1]).
transition(t2, [x1,x4], [x0,x3]).
transition(t3, [x2,x11], [x1]).
transition(t4, [x1], [x2,x5,x9]).
transition(t5, [x6], [x7]).
transition(t6, [x3,x7], [x4,x6]).
transition(t7, [x8,x12], [x4,x7]).
transition(t8, [x4,x5,x7], [x8,x10]).
transition(t9, [x9,x10], [x11,x12]).

init(x2, 1).
init(x8, 1).
init(x11, 1).
init(x12, 1).
cond('(>= x2 1)').


* Constructing constraint C_0 for petri net N
(declare-fun x0 () Int)
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x6 () Int)
(declare-fun x4 () Int)
(declare-fun x5 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x9 () Int)
(declare-fun x10 () Int)
(declare-fun x11 () Int)
(declare-fun x12 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(assert (>= x0 0))
(assert (>= x1 0))
(assert (>= x2 0))
(assert (>= x3 0))
(assert (>= x6 0))
(assert (>= x4 0))
(assert (>= x5 0))
(assert (>= x7 0))
(assert (>= x8 0))
(assert (>= x9 0))
(assert (>= x10 0))
(assert (>= x11 0))
(assert (>= x12 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (= x0 (+ 0 t2 (- t1))))
(assert (= x1 (+ 0 t1 t3 (- t2) (- t4))))
(assert (= x2 (+ 1 t4 (- t3))))
(assert (= x3 (+ 0 t2 (- t6))))
(assert (= x6 (+ 0 t6 (- t5))))
(assert (= x4 (+ 0 t6 (* t7 5) (- t2) (- (* t8 5)))))
(assert (= x5 (+ 0 t4 (- t8))))
(assert (= x7 (+ 0 t5 t7 (- t6) (- t8))))
(assert (= x8 (+ 1 t8 (- t7))))
(assert (= x9 (+ 0 t4 (- t9))))
(assert (= x10 (+ 0 t8 (- t9))))
(assert (= x11 (+ 1 t9 (- t3))))
(assert (= x12 (+ 1 t9 (- t7))))
(assert (>= x2 1))
(check-sat)
(get-model)

* Checking SAT(C0)
sat
(model 
  (define-fun t5 () Int
    0)
  (define-fun t2 () Int
    0)
  (define-fun t7 () Int
    0)
  (define-fun t4 () Int
    0)
  (define-fun t9 () Int
    0)
  (define-fun t8 () Int
    0)
  (define-fun t6 () Int
    0)
  (define-fun t1 () Int
    0)
  (define-fun t3 () Int
    0)
  (define-fun x12 () Int
    1)
  (define-fun x11 () Int
    1)
  (define-fun x10 () Int
    0)
  (define-fun x9 () Int
    0)
  (define-fun x8 () Int
    1)
  (define-fun x7 () Int
    0)
  (define-fun x5 () Int
    0)
  (define-fun x4 () Int
    0)
  (define-fun x6 () Int
    0)
  (define-fun x3 () Int
    0)
  (define-fun x2 () Int
    1)
  (define-fun x1 () Int
    0)
  (define-fun x0 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t5, 0).
assignment(t2, 0).
assignment(t7, 0).
assignment(t4, 0).
assignment(t9, 0).
assignment(t8, 0).
assignment(t6, 0).
assignment(t1, 0).
assignment(t3, 0).
assignment(x12, 1).
assignment(x11, 1).
assignment(x10, 0).
assignment(x9, 0).
assignment(x8, 1).
assignment(x7, 0).
assignment(x5, 0).
assignment(x4, 0).
assignment(x6, 0).
assignment(x3, 0).
assignment(x2, 1).
assignment(x1, 0).
assignment(x0, 0).
- constraints C_theta...
(declare-fun x0 () Bool)
(declare-fun x1 () Bool)
(declare-fun x2 () Bool)
(declare-fun x3 () Bool)
(declare-fun x6 () Bool)
(declare-fun x4 () Bool)
(declare-fun x5 () Bool)
(declare-fun x7 () Bool)
(declare-fun x8 () Bool)
(declare-fun x9 () Bool)
(declare-fun x10 () Bool)
(declare-fun x11 () Bool)
(declare-fun x12 () Bool)

(assert (implies x0 x1))
(assert (implies x1 (and (or x2 x5 x9) (or x0 x3))))
(assert (implies x2 x1))
(assert (implies x3 (or x4 x6)))
(assert (implies x6 x7))
(assert (implies x4 (and (or x8 x10) (or x0 x3))))
(assert (implies x5 (or x8 x10)))
(assert (implies x7 (and (or x8 x10) (or x4 x6))))
(assert (implies x8 (or x4 x7)))
(assert (implies x9 (or x11 x12)))
(assert (implies x10 (or x11 x12)))
(assert (implies x11 x1))
(assert (implies x12 (or x4 x7)))

(assert (or x2 x8 x11 x12))

(assert (not x12))
(assert (not x11))
(assert (not x8))
(assert (not x2))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 37 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

