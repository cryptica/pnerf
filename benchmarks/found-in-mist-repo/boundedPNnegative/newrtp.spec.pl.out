PETRINIZER: The checker for Petri Nets
[benchmarks/found-in-mist-repo/boundedPNnegative/newrtp.spec.pl]

* Constructing petri net N from input file
place(begin, [], [t1]).
place(sc1, [t2], [t3]).
place(oh_ns, [t3], [t5,t4]).
place(point1, [t4], [t6]).
place(oh_a_dt, [t6], [t9,t8,t7]).
place(sc2, [t8], [t10]).
place(sc3, [t9], [t11]).
place(point2, [t11,t10,t7,t5], [t12]).
place(do, [t12,t1], [t2]).

transition(t1, [begin], [do]).
transition(t2, [do], [sc1]).
transition(t3, [sc1], [oh_ns]).
transition(t4, [oh_ns], [point1]).
transition(t5, [oh_ns], [point2]).
transition(t6, [point1], [oh_a_dt]).
transition(t7, [oh_a_dt], [point2]).
transition(t8, [oh_a_dt], [sc2]).
transition(t9, [oh_a_dt], [sc3]).
transition(t10, [sc2], [point2]).
transition(t11, [sc3], [point2]).
transition(t12, [point2], [do]).

init(begin, 1).
cond('(>= begin 1)').


* Constructing constraint C_0 for petri net N
(declare-fun begin () Int)
(declare-fun sc1 () Int)
(declare-fun oh_ns () Int)
(declare-fun point1 () Int)
(declare-fun oh_a_dt () Int)
(declare-fun sc2 () Int)
(declare-fun sc3 () Int)
(declare-fun point2 () Int)
(declare-fun do () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(assert (>= begin 0))
(assert (>= sc1 0))
(assert (>= oh_ns 0))
(assert (>= point1 0))
(assert (>= oh_a_dt 0))
(assert (>= sc2 0))
(assert (>= sc3 0))
(assert (>= point2 0))
(assert (>= do 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (= begin (+ 1 (- t1))))
(assert (= sc1 (+ 0 t2 (- t3))))
(assert (= oh_ns (+ 0 t3 (- t4) (- t5))))
(assert (= point1 (+ 0 t4 (- t6))))
(assert (= oh_a_dt (+ 0 t6 (- t7) (- t8) (- t9))))
(assert (= sc2 (+ 0 t8 (- t10))))
(assert (= sc3 (+ 0 t9 (- t11))))
(assert (= point2 (+ 0 t10 t11 t5 t7 (- t12))))
(assert (= do (+ 0 t1 t12 (- t2))))
(assert (>= begin 1))
(check-sat)
(get-model)

* Checking SAT(C0)
sat
(model 
  (define-fun t10 () Int
    0)
  (define-fun t5 () Int
    0)
  (define-fun t2 () Int
    0)
  (define-fun t7 () Int
    0)
  (define-fun t4 () Int
    0)
  (define-fun t12 () Int
    0)
  (define-fun t9 () Int
    0)
  (define-fun t11 () Int
    0)
  (define-fun t8 () Int
    0)
  (define-fun t6 () Int
    0)
  (define-fun t1 () Int
    0)
  (define-fun t3 () Int
    0)
  (define-fun do () Int
    0)
  (define-fun point2 () Int
    0)
  (define-fun sc3 () Int
    0)
  (define-fun sc2 () Int
    0)
  (define-fun oh_a_dt () Int
    0)
  (define-fun point1 () Int
    0)
  (define-fun oh_ns () Int
    0)
  (define-fun sc1 () Int
    0)
  (define-fun begin () Int
    1)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 0).
assignment(t5, 0).
assignment(t2, 0).
assignment(t7, 0).
assignment(t4, 0).
assignment(t12, 0).
assignment(t9, 0).
assignment(t11, 0).
assignment(t8, 0).
assignment(t6, 0).
assignment(t1, 0).
assignment(t3, 0).
assignment(do, 0).
assignment(point2, 0).
assignment(sc3, 0).
assignment(sc2, 0).
assignment(oh_a_dt, 0).
assignment(point1, 0).
assignment(oh_ns, 0).
assignment(sc1, 0).
assignment(begin, 1).
- constraints C_theta...
(declare-fun begin () Bool)
(declare-fun sc1 () Bool)
(declare-fun oh_ns () Bool)
(declare-fun point1 () Bool)
(declare-fun oh_a_dt () Bool)
(declare-fun sc2 () Bool)
(declare-fun sc3 () Bool)
(declare-fun point2 () Bool)
(declare-fun do () Bool)

(assert (implies begin do))
(assert (implies sc1 oh_ns))
(assert (implies oh_ns (and point2 point1)))
(assert (implies point1 oh_a_dt))
(assert (implies oh_a_dt (and sc3 sc2 point2)))
(assert (implies sc2 point2))
(assert (implies sc3 point2))
(assert (implies point2 do))
(assert (implies do sc1))

(assert (or begin))

(assert (not begin))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 26 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

