PETRINIZER: The checker for Petri Nets
[benchmarks/cprover-PN/reaction2.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [], [t1]).
place(s1, [t1], [t2]).
place(s2, [t2], [t3]).
place(l6, [t4], []).
place(l3, [t2], [t6]).
place(l4, [t6,t3], [t7]).
place(l2, [t7,t1], [t5]).
place(l1, [t8], [t4]).
place(l5, [t5], [t9,t8]).
place(l7, [t9], [t10]).
place(s4, [t4], [t10]).
place(s3, [t10,t9,t8,t7,t6,t5,t3], [t9,t8,t7,t6,t5,t4]).
place(l0, [t10], [t3,t2,t1]).

transition(t1, [l0,s0], [s1,l2]).
transition(t2, [l0,s1], [s2,l3]).
transition(t3, [l0,s2], [s3,l4]).
transition(t4, [l1,s3], [s4,l6]).
transition(t5, [l2,s3], [s3,l5]).
transition(t6, [l3,s3], [s3,l4]).
transition(t7, [l4,s3], [s3,l2]).
transition(t8, [l5,s3], [s3,l1]).
transition(t9, [l5,s3], [s3,l7]).
transition(t10, [l7,s4], [s3,l0]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s3 1)').
cond('(>= l7 2)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s0 () Int)
(declare-fun s1 () Int)
(declare-fun s2 () Int)
(declare-fun l6 () Int)
(declare-fun l3 () Int)
(declare-fun l4 () Int)
(declare-fun l2 () Int)
(declare-fun l1 () Int)
(declare-fun l5 () Int)
(declare-fun l7 () Int)
(declare-fun s4 () Int)
(declare-fun s3 () Int)
(declare-fun l0 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= l6 0))
(assert (>= l3 0))
(assert (>= l4 0))
(assert (>= l2 0))
(assert (>= l1 0))
(assert (>= l5 0))
(assert (>= l7 0))
(assert (>= s4 0))
(assert (>= s3 0))
(assert (>= l0 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (= s0 (+ 1 (- t1))))
(assert (= s1 (+ 0 t1 (- t2))))
(assert (= s2 (+ 0 t2 (- t3))))
(assert (= l6 (+ 0 t4)))
(assert (= l3 (+ 0 t2 (- t6))))
(assert (= l4 (+ 0 t3 t6 (- t7))))
(assert (= l2 (+ 0 t1 t7 (- t5))))
(assert (= l1 (+ 0 t8 (- t4))))
(assert (= l5 (+ 0 t5 (- t8) (- t9))))
(assert (= l7 (+ 0 t9 (- t10))))
(assert (= s4 (+ 0 t4 (- t10))))
(assert (= s3 (+ 0 t10 t3 (- t4))))
(assert (= l0 (+ init1 t10 (- t1) (- t2) (- t3))))
(assert (>= init1 1))
(assert (>= s3 1))
(assert (>= l7 2))
(check-sat)
(get-model)

* Checking SAT(C0)n
sat
(model 
  (define-fun t10 () Int
    0)
  (define-fun init1 () Int
    3)
  (define-fun t5 () Int
    3)
  (define-fun t2 () Int
    1)
  (define-fun t7 () Int
    2)
  (define-fun t4 () Int
    0)
  (define-fun t9 () Int
    3)
  (define-fun t8 () Int
    0)
  (define-fun t6 () Int
    1)
  (define-fun t1 () Int
    1)
  (define-fun t3 () Int
    1)
  (define-fun l0 () Int
    0)
  (define-fun s3 () Int
    1)
  (define-fun s4 () Int
    0)
  (define-fun l7 () Int
    3)
  (define-fun l5 () Int
    0)
  (define-fun l1 () Int
    0)
  (define-fun l2 () Int
    0)
  (define-fun l4 () Int
    0)
  (define-fun l3 () Int
    0)
  (define-fun l6 () Int
    0)
  (define-fun s2 () Int
    0)
  (define-fun s1 () Int
    0)
  (define-fun s0 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 0).
assignment(init1, 3).
assignment(t5, 3).
assignment(t2, 1).
assignment(t7, 2).
assignment(t4, 0).
assignment(t9, 3).
assignment(t8, 0).
assignment(t6, 1).
assignment(t1, 1).
assignment(t3, 1).
assignment(l0, 0).
assignment(s3, 1).
assignment(s4, 0).
assignment(l7, 3).
assignment(l5, 0).
assignment(l1, 0).
assignment(l2, 0).
assignment(l4, 0).
assignment(l3, 0).
assignment(l6, 0).
assignment(s2, 0).
assignment(s1, 0).
assignment(s0, 0).

- constraints C_theta...
(declare-fun s0 () Bool)
(declare-fun s1 () Bool)
(declare-fun s2 () Bool)
(declare-fun l6 () Bool)
(declare-fun l3 () Bool)
(declare-fun l4 () Bool)
(declare-fun l2 () Bool)
(declare-fun l1 () Bool)
(declare-fun l5 () Bool)
(declare-fun l7 () Bool)
(declare-fun s4 () Bool)
(declare-fun s3 () Bool)
(declare-fun l0 () Bool)

(assert (implies s0 (or s1 l2)))
(assert (implies s1 (or s2 l3)))
(assert (implies s2 (or s3 l4)))
(assert (implies l3 (or s3 l4)))
(assert (implies l4 (or s3 l2)))
(assert (implies l2 (or s3 l5)))
(assert (implies l1 (or s4 l6)))
(assert (implies l5 (and (or s3 l7) (or s3 l1))))
(assert (implies l7 (or s3 l0)))
(assert (implies s4 (or s3 l0)))
(assert (implies s3 (and (or s3 l7) (or s3 l1) (or s3 l2) (or s3 l4) (or s3 l5) (or s4 l6))))
(assert (implies l0 (and (or s3 l4) (or s2 l3) (or s1 l2))))

(assert (or s0 l0))

(assert (not s3))
(assert (not l7))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 34 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

