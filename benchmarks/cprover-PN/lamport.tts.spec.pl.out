place(s0).
place(s1).
place(s2).
place(s3).
place(s4).
place(s5).
place(s6).
place(s7).
place(s8).
place(s9).
place(s10).
place(s11).
place(s12).
place(s13).
place(s14).
place(s15).
place(s16).
place(s17).
place(l0).
place(l1).
place(l2).
place(l3).
place(l4).
place(l5).
place(l6).
place(l7).
place(l8).
place(l9).
place(l10).
place(l11).
transition(t1, [l0, s0], [s1, l2]).
transition(t2, [l0, s1], [s2, l5]).
transition(t3, [l0, s2], [s3, l6]).
transition(t4, [l0, s3], [s4, l11]).
transition(t5, [l1, s4], [s5, l2]).
transition(t6, [l2, s4], [s6, l3]).
transition(t7, [l3, s4], [s7, l1]).
transition(t8, [l4, s4], [s9, l7]).
transition(t9, [l5, s4], [s12, l11]).
transition(t10, [l5, s4], [s14, l10]).
transition(t11, [l6, s4], [s17, l9]).
transition(t12, [l7, s4], [s11, l6]).
transition(t13, [l10, s4], [s16, l6]).
transition(t14, [l4, s5], [s4, l5]).
transition(t15, [l5, s6], [s4, l4]).
transition(t16, [l6, s7], [s8, l0]).
transition(t17, [l0, s8], [s4, l6]).
transition(t18, [l9, s9], [s10, l0]).
transition(t19, [l0, s10], [s4, l4]).
transition(t20, [l0, s11], [s4, l8]).
transition(t21, [l8, s12], [s13, l0]).
transition(t22, [l0, s13], [s4, l5]).
transition(t23, [l9, s14], [s15, l0]).
transition(t24, [l0, s15], [s4, l5]).
transition(t25, [l0, s16], [s4, l11]).
transition(t26, [l11, s17], [s4, l0]).
init(l0, init1).
cond('(>= init1 1)').
init(s0).
cond('(>= s4 1)').
cond('(>= l1 1)').
cond('(>= l10 1)').
PETRINIZER: The checker for Petri Nets
[lamport.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [], [t1]).
place(s1, [t1], [t2]).
place(s2, [t2], [t3]).
place(s3, [t3], [t4]).
place(l2, [t5,t1], [t6]).
place(l3, [t6], [t7]).
place(l1, [t7], [t5]).
place(l7, [t8], [t12]).
place(l10, [t10], [t13]).
place(s5, [t5], [t14]).
place(s6, [t6], [t15]).
place(s7, [t7], [t16]).
place(s8, [t16], [t17]).
place(l6, [t17,t13,t12,t3], [t16,t11]).
place(s9, [t8], [t18]).
place(s10, [t18], [t19]).
place(l4, [t19,t15], [t14,t8]).
place(s11, [t12], [t20]).
place(l8, [t20], [t21]).
place(s12, [t9], [t21]).
place(s13, [t21], [t22]).
place(l9, [t11], [t23,t18]).
place(s14, [t10], [t23]).
place(s15, [t23], [t24]).
place(l5, [t24,t22,t14,t2], [t15,t10,t9]).
place(s16, [t13], [t25]).
place(l11, [t25,t9,t4], [t26]).
place(s17, [t11], [t26]).
place(s4, [t26,t25,t24,t22,t20,t19,t17,t15,t14,t4], [t13,t12,t11,t10,t9,t8,t7,t6,t5]).
place(l0, [t26,t23,t21,t18,t16], [t25,t24,t22,t20,t19,t17,t4,t3,t2,t1]).

transition(t1, [l0,s0], [s1,l2]).
transition(t2, [l0,s1], [s2,l5]).
transition(t3, [l0,s2], [s3,l6]).
transition(t4, [l0,s3], [s4,l11]).
transition(t5, [l1,s4], [s5,l2]).
transition(t6, [l2,s4], [s6,l3]).
transition(t7, [l3,s4], [s7,l1]).
transition(t8, [l4,s4], [s9,l7]).
transition(t9, [l5,s4], [s12,l11]).
transition(t10, [l5,s4], [s14,l10]).
transition(t11, [l6,s4], [s17,l9]).
transition(t12, [l7,s4], [s11,l6]).
transition(t13, [l10,s4], [s16,l6]).
transition(t14, [l4,s5], [s4,l5]).
transition(t15, [l5,s6], [s4,l4]).
transition(t16, [l6,s7], [s8,l0]).
transition(t17, [l0,s8], [s4,l6]).
transition(t18, [l9,s9], [s10,l0]).
transition(t19, [l0,s10], [s4,l4]).
transition(t20, [l0,s11], [s4,l8]).
transition(t21, [l8,s12], [s13,l0]).
transition(t22, [l0,s13], [s4,l5]).
transition(t23, [l9,s14], [s15,l0]).
transition(t24, [l0,s15], [s4,l5]).
transition(t25, [l0,s16], [s4,l11]).
transition(t26, [l11,s17], [s4,l0]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s4 1)').
cond('(>= l1 1)').
cond('(>= l10 1)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s0 () Int)
(declare-fun s1 () Int)
(declare-fun s2 () Int)
(declare-fun s3 () Int)
(declare-fun l2 () Int)
(declare-fun l3 () Int)
(declare-fun l1 () Int)
(declare-fun l7 () Int)
(declare-fun l10 () Int)
(declare-fun s5 () Int)
(declare-fun s6 () Int)
(declare-fun s7 () Int)
(declare-fun s8 () Int)
(declare-fun l6 () Int)
(declare-fun s9 () Int)
(declare-fun s10 () Int)
(declare-fun l4 () Int)
(declare-fun s11 () Int)
(declare-fun l8 () Int)
(declare-fun s12 () Int)
(declare-fun s13 () Int)
(declare-fun l9 () Int)
(declare-fun s14 () Int)
(declare-fun s15 () Int)
(declare-fun l5 () Int)
(declare-fun s16 () Int)
(declare-fun l11 () Int)
(declare-fun s17 () Int)
(declare-fun s4 () Int)
(declare-fun l0 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(declare-fun t14 () Int)
(declare-fun t15 () Int)
(declare-fun t16 () Int)
(declare-fun t17 () Int)
(declare-fun t18 () Int)
(declare-fun t19 () Int)
(declare-fun t20 () Int)
(declare-fun t21 () Int)
(declare-fun t22 () Int)
(declare-fun t23 () Int)
(declare-fun t24 () Int)
(declare-fun t25 () Int)
(declare-fun t26 () Int)
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= s3 0))
(assert (>= l2 0))
(assert (>= l3 0))
(assert (>= l1 0))
(assert (>= l7 0))
(assert (>= l10 0))
(assert (>= s5 0))
(assert (>= s6 0))
(assert (>= s7 0))
(assert (>= s8 0))
(assert (>= l6 0))
(assert (>= s9 0))
(assert (>= s10 0))
(assert (>= l4 0))
(assert (>= s11 0))
(assert (>= l8 0))
(assert (>= s12 0))
(assert (>= s13 0))
(assert (>= l9 0))
(assert (>= s14 0))
(assert (>= s15 0))
(assert (>= l5 0))
(assert (>= s16 0))
(assert (>= l11 0))
(assert (>= s17 0))
(assert (>= s4 0))
(assert (>= l0 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (>= t14 0))
(assert (>= t15 0))
(assert (>= t16 0))
(assert (>= t17 0))
(assert (>= t18 0))
(assert (>= t19 0))
(assert (>= t20 0))
(assert (>= t21 0))
(assert (>= t22 0))
(assert (>= t23 0))
(assert (>= t24 0))
(assert (>= t25 0))
(assert (>= t26 0))
(assert (= s0 (+ 1 (- t1))))
(assert (= s1 (+ 0 t1 (- t2))))
(assert (= s2 (+ 0 t2 (- t3))))
(assert (= s3 (+ 0 t3 (- t4))))
(assert (= l2 (+ 0 t1 t5 (- t6))))
(assert (= l3 (+ 0 t6 (- t7))))
(assert (= l1 (+ 0 t7 (- t5))))
(assert (= l7 (+ 0 t8 (- t12))))
(assert (= l10 (+ 0 t10 (- t13))))
(assert (= s5 (+ 0 t5 (- t14))))
(assert (= s6 (+ 0 t6 (- t15))))
(assert (= s7 (+ 0 t7 (- t16))))
(assert (= s8 (+ 0 t16 (- t17))))
(assert (= l6 (+ 0 t12 t13 t17 t3 (- t11) (- t16))))
(assert (= s9 (+ 0 t8 (- t18))))
(assert (= s10 (+ 0 t18 (- t19))))
(assert (= l4 (+ 0 t15 t19 (- t14) (- t8))))
(assert (= s11 (+ 0 t12 (- t20))))
(assert (= l8 (+ 0 t20 (- t21))))
(assert (= s12 (+ 0 t9 (- t21))))
(assert (= s13 (+ 0 t21 (- t22))))
(assert (= l9 (+ 0 t11 (- t18) (- t23))))
(assert (= s14 (+ 0 t10 (- t23))))
(assert (= s15 (+ 0 t23 (- t24))))
(assert (= l5 (+ 0 t14 t2 t22 t24 (- t10) (- t15) (- t9))))
(assert (= s16 (+ 0 t13 (- t25))))
(assert (= l11 (+ 0 t25 t4 t9 (- t26))))
(assert (= s17 (+ 0 t11 (- t26))))
(assert (= s4 (+ 0 t14 t15 t17 t19 t20 t22 t24 t25 t26 t4 (- t10) (- t11) (- t12) (- t13) (- t5) (- t6) (- t7) (- t8) (- t9))))
(assert (= l0 (+ init1 t16 t18 t21 t23 t26 (- t1) (- t17) (- t19) (- t2) (- t20) (- t22) (- t24) (- t25) (- t3) (- t4))))
(assert (>= init1 1))
(assert (>= s4 1))
(assert (>= l1 1))
(assert (>= l10 1))
(check-sat)
(get-model)

* Checking SAT(C0)n
sat
(model 
  (define-fun t10 () Int
    1)
  (define-fun t5 () Int
    0)
  (define-fun t15 () Int
    1)
  (define-fun t12 () Int
    0)
  (define-fun t20 () Int
    0)
  (define-fun t21 () Int
    0)
  (define-fun t6 () Int
    1)
  (define-fun t25 () Int
    0)
  (define-fun t17 () Int
    1)
  (define-fun t26 () Int
    1)
  (define-fun t14 () Int
    0)
  (define-fun t16 () Int
    1)
  (define-fun t7 () Int
    1)
  (define-fun init1 () Int
    3)
  (define-fun t1 () Int
    1)
  (define-fun t23 () Int
    1)
  (define-fun t2 () Int
    1)
  (define-fun t4 () Int
    1)
  (define-fun t8 () Int
    0)
  (define-fun t24 () Int
    1)
  (define-fun t19 () Int
    0)
  (define-fun t22 () Int
    0)
  (define-fun t13 () Int
    0)
  (define-fun t11 () Int
    1)
  (define-fun t9 () Int
    0)
  (define-fun t18 () Int
    0)
  (define-fun t3 () Int
    1)
  (define-fun l0 () Int
    0)
  (define-fun s4 () Int
    1)
  (define-fun s17 () Int
    0)
  (define-fun l11 () Int
    0)
  (define-fun s16 () Int
    0)
  (define-fun l5 () Int
    0)
  (define-fun s15 () Int
    0)
  (define-fun s14 () Int
    0)
  (define-fun l9 () Int
    0)
  (define-fun s13 () Int
    0)
  (define-fun s12 () Int
    0)
  (define-fun l8 () Int
    0)
  (define-fun s11 () Int
    0)
  (define-fun l4 () Int
    1)
  (define-fun s10 () Int
    0)
  (define-fun s9 () Int
    0)
  (define-fun l6 () Int
    0)
  (define-fun s8 () Int
    0)
  (define-fun s7 () Int
    0)
  (define-fun s6 () Int
    0)
  (define-fun s5 () Int
    0)
  (define-fun l10 () Int
    1)
  (define-fun l7 () Int
    0)
  (define-fun l1 () Int
    1)
  (define-fun l3 () Int
    0)
  (define-fun l2 () Int
    0)
  (define-fun s3 () Int
    0)
  (define-fun s2 () Int
    0)
  (define-fun s1 () Int
    0)
  (define-fun s0 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 1).
assignment(t5, 0).
assignment(t15, 1).
assignment(t12, 0).
assignment(t20, 0).
assignment(t21, 0).
assignment(t6, 1).
assignment(t25, 0).
assignment(t17, 1).
assignment(t26, 1).
assignment(t14, 0).
assignment(t16, 1).
assignment(t7, 1).
assignment(init1, 3).
assignment(t1, 1).
assignment(t23, 1).
assignment(t2, 1).
assignment(t4, 1).
assignment(t8, 0).
assignment(t24, 1).
assignment(t19, 0).
assignment(t22, 0).
assignment(t13, 0).
assignment(t11, 1).
assignment(t9, 0).
assignment(t18, 0).
assignment(t3, 1).
assignment(l0, 0).
assignment(s4, 1).
assignment(s17, 0).
assignment(l11, 0).
assignment(s16, 0).
assignment(l5, 0).
assignment(s15, 0).
assignment(s14, 0).
assignment(l9, 0).
assignment(s13, 0).
assignment(s12, 0).
assignment(l8, 0).
assignment(s11, 0).
assignment(l4, 1).
assignment(s10, 0).
assignment(s9, 0).
assignment(l6, 0).
assignment(s8, 0).
assignment(s7, 0).
assignment(s6, 0).
assignment(s5, 0).
assignment(l10, 1).
assignment(l7, 0).
assignment(l1, 1).
assignment(l3, 0).
assignment(l2, 0).
assignment(s3, 0).
assignment(s2, 0).
assignment(s1, 0).
assignment(s0, 0).
- constraints C_theta...
(declare-fun s0 () Bool)
(declare-fun s1 () Bool)
(declare-fun s2 () Bool)
(declare-fun s3 () Bool)
(declare-fun l2 () Bool)
(declare-fun l3 () Bool)
(declare-fun l1 () Bool)
(declare-fun l7 () Bool)
(declare-fun l10 () Bool)
(declare-fun s5 () Bool)
(declare-fun s6 () Bool)
(declare-fun s7 () Bool)
(declare-fun s8 () Bool)
(declare-fun l6 () Bool)
(declare-fun s9 () Bool)
(declare-fun s10 () Bool)
(declare-fun l4 () Bool)
(declare-fun s11 () Bool)
(declare-fun l8 () Bool)
(declare-fun s12 () Bool)
(declare-fun s13 () Bool)
(declare-fun l9 () Bool)
(declare-fun s14 () Bool)
(declare-fun s15 () Bool)
(declare-fun l5 () Bool)
(declare-fun s16 () Bool)
(declare-fun l11 () Bool)
(declare-fun s17 () Bool)
(declare-fun s4 () Bool)
(declare-fun l0 () Bool)

(assert (implies s0 (or s1 l2)))
(assert (implies s1 (or s2 l5)))
(assert (implies s2 (or s3 l6)))
(assert (implies s3 (or s4 l11)))
(assert (implies l2 (or s6 l3)))
(assert (implies l3 (or s7 l1)))
(assert (implies l1 (or s5 l2)))
(assert (implies l7 (or s11 l6)))
(assert (implies l10 (or s16 l6)))
(assert (implies s5 (or s4 l5)))
(assert (implies s6 (or s4 l4)))
(assert (implies s7 (or s8 l0)))
(assert (implies s8 (or s4 l6)))
(assert (implies l6 (and (or s8 l0) (or s17 l9))))
(assert (implies s9 (or s10 l0)))
(assert (implies s10 (or s4 l4)))
(assert (implies l4 (and (or s4 l5) (or s9 l7))))
(assert (implies s11 (or s4 l8)))
(assert (implies l8 (or s13 l0)))
(assert (implies s12 (or s13 l0)))
(assert (implies s13 (or s4 l5)))
(assert (implies l9 (and (or s15 l0) (or s10 l0))))
(assert (implies s14 (or s15 l0)))
(assert (implies s15 (or s4 l5)))
(assert (implies l5 (and (or s4 l4) (or s14 l10) (or s12 l11))))
(assert (implies s16 (or s4 l11)))
(assert (implies l11 (or s4 l0)))
(assert (implies s17 (or s4 l0)))
(assert (implies s4 (and (or s16 l6) (or s11 l6) (or s17 l9) (or s14 l10) (or s12 l11) (or s9 l7) (or s7 l1) (or s6 l3) (or s5 l2))))
(assert (implies l0 (and (or s4 l11) (or s4 l5) (or s4 l5) (or s4 l8) (or s4 l4) (or s4 l6) (or s4 l11) (or s3 l6) (or s2 l5) (or s1 l2))))

(assert (or s0 l0))

(assert (not s4))
(assert (not l4))
(assert (not l10))
(assert (not l1))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 71 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

