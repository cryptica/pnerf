PETRINIZER: The checker for Petri Nets
[benchmarks/cprover-PN/platoon.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [], [t1]).
place(s1, [t1], [t2]).
place(l3, [t3], [t5]).
place(l1, [t6], [t3]).
place(l4, [t7], [t6]).
place(l8, [t8], []).
place(l10, [t5], [t10]).
place(l2, [t10], [t4]).
place(l9, [t11], [t9]).
place(l12, [t4], [t12]).
place(l7, [t12], [t8]).
place(s3, [t11], [t13]).
place(l11, [t13,t2], [t11]).
place(s4, [t6], [t14]).
place(l5, [t9], [t15,t14]).
place(s5, [t3], [t15]).
place(l0, [t15,t14], [t16,t13,t2,t1]).
place(s6, [t10], [t16]).
place(s2, [t16,t15,t14,t13,t2], [t12,t11,t10,t9,t8,t7,t6,t5,t4,t3]).
place(l6, [t16,t1], [t7]).

transition(t1, [l0,s0], [s1,l6]).
transition(t2, [l0,s1], [s2,l11]).
transition(t3, [l1,s2], [s5,l3]).
transition(t4, [l2,s2], [l12]).
transition(t5, [l3,s2], [l10]).
transition(t6, [l4,s2], [s4,l1]).
transition(t7, [l6,s2], [l4]).
transition(t8, [l7,s2], [l8]).
transition(t9, [l9,s2], [l5]).
transition(t10, [l10,s2], [s6,l2]).
transition(t11, [l11,s2], [s3,l9]).
transition(t12, [l12,s2], [l7]).
transition(t13, [l0,s3], [s2,l11]).
transition(t14, [l5,s4], [s2,l0]).
transition(t15, [l5,s5], [s2,l0]).
transition(t16, [l0,s6], [s2,l6]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s2 1)').
cond('(>= l12 2)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s0 () Int)
(declare-fun s1 () Int)
(declare-fun l3 () Int)
(declare-fun l1 () Int)
(declare-fun l4 () Int)
(declare-fun l8 () Int)
(declare-fun l10 () Int)
(declare-fun l2 () Int)
(declare-fun l9 () Int)
(declare-fun l12 () Int)
(declare-fun l7 () Int)
(declare-fun s3 () Int)
(declare-fun l11 () Int)
(declare-fun s4 () Int)
(declare-fun l5 () Int)
(declare-fun s5 () Int)
(declare-fun l0 () Int)
(declare-fun s6 () Int)
(declare-fun s2 () Int)
(declare-fun l6 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(declare-fun t14 () Int)
(declare-fun t15 () Int)
(declare-fun t16 () Int)
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= l3 0))
(assert (>= l1 0))
(assert (>= l4 0))
(assert (>= l8 0))
(assert (>= l10 0))
(assert (>= l2 0))
(assert (>= l9 0))
(assert (>= l12 0))
(assert (>= l7 0))
(assert (>= s3 0))
(assert (>= l11 0))
(assert (>= s4 0))
(assert (>= l5 0))
(assert (>= s5 0))
(assert (>= l0 0))
(assert (>= s6 0))
(assert (>= s2 0))
(assert (>= l6 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (>= t14 0))
(assert (>= t15 0))
(assert (>= t16 0))
(assert (= s0 (+ 1 (- t1))))
(assert (= s1 (+ 0 t1 (- t2))))
(assert (= l3 (+ 0 t3 (- t5))))
(assert (= l1 (+ 0 t6 (- t3))))
(assert (= l4 (+ 0 t7 (- t6))))
(assert (= l8 (+ 0 t8)))
(assert (= l10 (+ 0 t5 (- t10))))
(assert (= l2 (+ 0 t10 (- t4))))
(assert (= l9 (+ 0 t11 (- t9))))
(assert (= l12 (+ 0 t4 (- t12))))
(assert (= l7 (+ 0 t12 (- t8))))
(assert (= s3 (+ 0 t11 (- t13))))
(assert (= l11 (+ 0 t13 t2 (- t11))))
(assert (= s4 (+ 0 t6 (- t14))))
(assert (= l5 (+ 0 t9 (- t14) (- t15))))
(assert (= s5 (+ 0 t3 (- t15))))
(assert (= l0 (+ init1 t14 t15 (- t1) (- t13) (- t16) (- t2))))
(assert (= s6 (+ 0 t10 (- t16))))
(assert (= s2 (+ 0 t13 t14 t15 t16 t2 (- t10) (- t11) (- t12) (- t3) (- t4) (- t5) (- t6) (- t7) (- t8) (- t9))))
(assert (= l6 (+ 0 t1 t16 (- t7))))
(assert (>= init1 1))
(assert (>= s2 1))
(assert (>= l12 2))
(check-sat)
(get-model)

* Checking SAT(C0)n
unsat
(error "line 98 column 10: model is not available")

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------

