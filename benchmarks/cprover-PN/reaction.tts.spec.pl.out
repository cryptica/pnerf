PETRINIZER: The checker for Petri Nets
[benchmarks/cprover-PN/reaction.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [], [t1]).
place(s1, [t1], [t2]).
place(s2, [t2], [t3]).
place(s3, [t3], [t4]).
place(l1, [t1], [t5]).
place(l6, [t5], []).
place(l2, [t2], [t6]).
place(l4, [t8], []).
place(l8, [t4], [t10,t9,t8]).
place(l3, [t10,t9], []).
place(s5, [t8], [t11]).
place(s6, [t9], [t12]).
place(l5, [t12,t6], []).
place(s7, [t12], [t13]).
place(l7, [t13,t3], [t7]).
place(l0, [t7], [t14,t13,t12,t11,t4,t3,t2,t1]).
place(s8, [t10], [t14]).
place(s4, [t14,t13,t11,t7,t6,t5,t4], [t10,t9,t8,t7,t6,t5]).
place(l9, [t14,t11], []).

transition(t1, [l0,s0], [s1,l1]).
transition(t2, [l0,s1], [s2,l2]).
transition(t3, [l0,s2], [s3,l7]).
transition(t4, [l0,s3], [s4,l8]).
transition(t5, [l1,s4], [s4,l6]).
transition(t6, [l2,s4], [s4,l5]).
transition(t7, [l7,s4], [s4,l0]).
transition(t8, [l8,s4], [s5,l4]).
transition(t9, [l8,s4], [s6,l3]).
transition(t10, [l8,s4], [s8,l3]).
transition(t11, [l0,s5], [s4,l9]).
transition(t12, [l0,s6], [s7,l5]).
transition(t13, [l0,s7], [s4,l7]).
transition(t14, [l0,s8], [s4,l9]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s4 1)').
cond('(>= l9 2)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s0 () Int)
(declare-fun s1 () Int)
(declare-fun s2 () Int)
(declare-fun s3 () Int)
(declare-fun l1 () Int)
(declare-fun l6 () Int)
(declare-fun l2 () Int)
(declare-fun l4 () Int)
(declare-fun l8 () Int)
(declare-fun l3 () Int)
(declare-fun s5 () Int)
(declare-fun s6 () Int)
(declare-fun l5 () Int)
(declare-fun s7 () Int)
(declare-fun l7 () Int)
(declare-fun l0 () Int)
(declare-fun s8 () Int)
(declare-fun s4 () Int)
(declare-fun l9 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(declare-fun t14 () Int)
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= s3 0))
(assert (>= l1 0))
(assert (>= l6 0))
(assert (>= l2 0))
(assert (>= l4 0))
(assert (>= l8 0))
(assert (>= l3 0))
(assert (>= s5 0))
(assert (>= s6 0))
(assert (>= l5 0))
(assert (>= s7 0))
(assert (>= l7 0))
(assert (>= l0 0))
(assert (>= s8 0))
(assert (>= s4 0))
(assert (>= l9 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (>= t14 0))
(assert (= s0 (+ 1 (- t1))))
(assert (= s1 (+ 0 t1 (- t2))))
(assert (= s2 (+ 0 t2 (- t3))))
(assert (= s3 (+ 0 t3 (- t4))))
(assert (= l1 (+ 0 t1 (- t5))))
(assert (= l6 (+ 0 t5)))
(assert (= l2 (+ 0 t2 (- t6))))
(assert (= l4 (+ 0 t8)))
(assert (= l8 (+ 0 t4 (- t10) (- t8) (- t9))))
(assert (= l3 (+ 0 t10 t9)))
(assert (= s5 (+ 0 t8 (- t11))))
(assert (= s6 (+ 0 t9 (- t12))))
(assert (= l5 (+ 0 t12 t6)))
(assert (= s7 (+ 0 t12 (- t13))))
(assert (= l7 (+ 0 t13 t3 (- t7))))
(assert (= l0 (+ init1 t7 (- t1) (- t11) (- t12) (- t13) (- t14) (- t2) (- t3) (- t4))))
(assert (= s8 (+ 0 t10 (- t14))))
(assert (= s4 (+ 0 t11 t13 t14 t4 (- t10) (- t8) (- t9))))
(assert (= l9 (+ 0 t11 t14)))
(assert (>= init1 1))
(assert (>= s4 1))
(assert (>= l9 2))
(check-sat)
(get-model)

* Checking SAT(C0)n
unsat
(error "line 91 column 10: model is not available")

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------

