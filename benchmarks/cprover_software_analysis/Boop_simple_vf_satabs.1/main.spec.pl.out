PETRINIZER: The checker for Petri Nets
[benchmarks/cprover_software_analysis/Boop_simple_vf_satabs.1/main.spec.pl]

* Constructing petri net N from input file
place(s1, [], []).
place(s3, [], []).
place(l24, [], []).
place(l0, [], [t2,t1]).
place(l1, [t1], [t3]).
place(l2, [t2], [t4]).
place(l3, [t4], [t5]).
place(l7, [t7], [t9,t8]).
place(l8, [t8], [t10]).
place(l6, [t10,t6], [t7]).
place(l10, [t11], [t13,t12]).
place(l11, [t12], [t14]).
place(l12, [t13], [t15]).
place(l13, [t15], [t16]).
place(l16, [t17], [t19,t18]).
place(l17, [t18], [t20]).
place(l18, [t19], [t21]).
place(l9, [t22,t9], [t11]).
place(l19, [t21,t20], [t23,t22]).
place(l20, [t23], [t25,t24]).
place(l21, [t24], [t26]).
place(s4, [t26], []).
place(l25, [t26], []).
place(l22, [t27], [t27]).
place(l23, [t28,t25], [t28]).
place(l4, [t5], [t29]).
place(l5, [t29,t3], [t6]).
place(l14, [t16], [t30]).
place(s2, [t16,t5], [t30,t29]).
place(s0, [t30,t29,t28,t27,t25,t24,t23,t22,t21,t20,t19,t18,t17,t15,t14,t13,t12,t11,t10,t9,t8,t7,t6,t4,t3,t2,t1], [t28,t27,t26,t25,t24,t23,t22,t21,t20,t19,t18,t17,t16,t15,t14,t13,t12,t11,t10,t9,t8,t7,t6,t5,t4,t3,t2,t1]).
place(l15, [t30,t14], [t17]).

transition(t1, [l0,s0], [s0,l1]).
transition(t2, [l0,s0], [s0,l2]).
transition(t3, [l1,s0], [s0,l5]).
transition(t4, [l2,s0], [s0,l3]).
transition(t5, [l3,s0], [s2,l4]).
transition(t6, [l5,s0], [s0,l6]).
transition(t7, [l6,s0], [s0,l7]).
transition(t8, [l7,s0], [s0,l8]).
transition(t9, [l7,s0], [s0,l9]).
transition(t10, [l8,s0], [s0,l6]).
transition(t11, [l9,s0], [s0,l10]).
transition(t12, [l10,s0], [s0,l11]).
transition(t13, [l10,s0], [s0,l12]).
transition(t14, [l11,s0], [s0,l15]).
transition(t15, [l12,s0], [s0,l13]).
transition(t16, [l13,s0], [s2,l14]).
transition(t17, [l15,s0], [s0,l16]).
transition(t18, [l16,s0], [s0,l17]).
transition(t19, [l16,s0], [s0,l18]).
transition(t20, [l17,s0], [s0,l19]).
transition(t21, [l18,s0], [s0,l19]).
transition(t22, [l19,s0], [s0,l9]).
transition(t23, [l19,s0], [s0,l20]).
transition(t24, [l20,s0], [s0,l21]).
transition(t25, [l20,s0], [s0,l23]).
transition(t26, [l21,s0], [s4,l25]).
transition(t27, [l22,s0], [l22,s0]).
transition(t28, [l23,s0], [l23,s0]).
transition(t29, [l4,s2], [s0,l5]).
transition(t30, [l14,s2], [s0,l15]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s4 1)').
cond('(>= l25 1)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s1 () Int)
(declare-fun s3 () Int)
(declare-fun l24 () Int)
(declare-fun l0 () Int)
(declare-fun l1 () Int)
(declare-fun l2 () Int)
(declare-fun l3 () Int)
(declare-fun l7 () Int)
(declare-fun l8 () Int)
(declare-fun l6 () Int)
(declare-fun l10 () Int)
(declare-fun l11 () Int)
(declare-fun l12 () Int)
(declare-fun l13 () Int)
(declare-fun l16 () Int)
(declare-fun l17 () Int)
(declare-fun l18 () Int)
(declare-fun l9 () Int)
(declare-fun l19 () Int)
(declare-fun l20 () Int)
(declare-fun l21 () Int)
(declare-fun s4 () Int)
(declare-fun l25 () Int)
(declare-fun l22 () Int)
(declare-fun l23 () Int)
(declare-fun l4 () Int)
(declare-fun l5 () Int)
(declare-fun l14 () Int)
(declare-fun s2 () Int)
(declare-fun s0 () Int)
(declare-fun l15 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(declare-fun t14 () Int)
(declare-fun t15 () Int)
(declare-fun t16 () Int)
(declare-fun t17 () Int)
(declare-fun t18 () Int)
(declare-fun t19 () Int)
(declare-fun t20 () Int)
(declare-fun t21 () Int)
(declare-fun t22 () Int)
(declare-fun t23 () Int)
(declare-fun t24 () Int)
(declare-fun t25 () Int)
(declare-fun t26 () Int)
(declare-fun t27 () Int)
(declare-fun t28 () Int)
(declare-fun t29 () Int)
(declare-fun t30 () Int)
(assert (>= s1 0))
(assert (>= s3 0))
(assert (>= l24 0))
(assert (>= l0 0))
(assert (>= l1 0))
(assert (>= l2 0))
(assert (>= l3 0))
(assert (>= l7 0))
(assert (>= l8 0))
(assert (>= l6 0))
(assert (>= l10 0))
(assert (>= l11 0))
(assert (>= l12 0))
(assert (>= l13 0))
(assert (>= l16 0))
(assert (>= l17 0))
(assert (>= l18 0))
(assert (>= l9 0))
(assert (>= l19 0))
(assert (>= l20 0))
(assert (>= l21 0))
(assert (>= s4 0))
(assert (>= l25 0))
(assert (>= l22 0))
(assert (>= l23 0))
(assert (>= l4 0))
(assert (>= l5 0))
(assert (>= l14 0))
(assert (>= s2 0))
(assert (>= s0 0))
(assert (>= l15 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (>= t14 0))
(assert (>= t15 0))
(assert (>= t16 0))
(assert (>= t17 0))
(assert (>= t18 0))
(assert (>= t19 0))
(assert (>= t20 0))
(assert (>= t21 0))
(assert (>= t22 0))
(assert (>= t23 0))
(assert (>= t24 0))
(assert (>= t25 0))
(assert (>= t26 0))
(assert (>= t27 0))
(assert (>= t28 0))
(assert (>= t29 0))
(assert (>= t30 0))
(assert (= s1 (+ 0)))
(assert (= s3 (+ 0)))
(assert (= l24 (+ 0)))
(assert (= l0 (+ init1 (- t1) (- t2))))
(assert (= l1 (+ 0 t1 (- t3))))
(assert (= l2 (+ 0 t2 (- t4))))
(assert (= l3 (+ 0 t4 (- t5))))
(assert (= l7 (+ 0 t7 (- t8) (- t9))))
(assert (= l8 (+ 0 t8 (- t10))))
(assert (= l6 (+ 0 t10 t6 (- t7))))
(assert (= l10 (+ 0 t11 (- t12) (- t13))))
(assert (= l11 (+ 0 t12 (- t14))))
(assert (= l12 (+ 0 t13 (- t15))))
(assert (= l13 (+ 0 t15 (- t16))))
(assert (= l16 (+ 0 t17 (- t18) (- t19))))
(assert (= l17 (+ 0 t18 (- t20))))
(assert (= l18 (+ 0 t19 (- t21))))
(assert (= l9 (+ 0 t22 t9 (- t11))))
(assert (= l19 (+ 0 t20 t21 (- t22) (- t23))))
(assert (= l20 (+ 0 t23 (- t24) (- t25))))
(assert (= l21 (+ 0 t24 (- t26))))
(assert (= s4 (+ 0 t26)))
(assert (= l25 (+ 0 t26)))
(assert (= l22 (+ 0)))
(assert (= l23 (+ 0 t25)))
(assert (= l4 (+ 0 t5 (- t29))))
(assert (= l5 (+ 0 t29 t3 (- t6))))
(assert (= l14 (+ 0 t16 (- t30))))
(assert (= s2 (+ 0 t16 t5 (- t29) (- t30))))
(assert (= s0 (+ 1 t29 t30 (- t16) (- t26) (- t5))))
(assert (= l15 (+ 0 t14 t30 (- t17))))
(assert (>= init1 1))
(assert (>= s4 1))
(assert (>= l25 1))
(check-sat)
(get-model)

* Checking SAT(C0)n
sat
(model 
  (define-fun t10 () Int
    0)
  (define-fun t5 () Int
    0)
  (define-fun t15 () Int
    0)
  (define-fun t12 () Int
    1)
  (define-fun t20 () Int
    0)
  (define-fun t21 () Int
    1)
  (define-fun t6 () Int
    1)
  (define-fun init1 () Int
    1)
  (define-fun t17 () Int
    1)
  (define-fun t14 () Int
    1)
  (define-fun t16 () Int
    0)
  (define-fun t7 () Int
    1)
  (define-fun t25 () Int
    0)
  (define-fun t26 () Int
    1)
  (define-fun t1 () Int
    1)
  (define-fun t23 () Int
    1)
  (define-fun t2 () Int
    0)
  (define-fun t4 () Int
    0)
  (define-fun t30 () Int
    0)
  (define-fun t8 () Int
    0)
  (define-fun t24 () Int
    1)
  (define-fun t19 () Int
    1)
  (define-fun t22 () Int
    0)
  (define-fun t13 () Int
    0)
  (define-fun t9 () Int
    1)
  (define-fun t11 () Int
    1)
  (define-fun t18 () Int
    0)
  (define-fun t29 () Int
    0)
  (define-fun t3 () Int
    1)
  (define-fun t28 () Int
    0)
  (define-fun t27 () Int
    0)
  (define-fun l15 () Int
    0)
  (define-fun s0 () Int
    0)
  (define-fun s2 () Int
    0)
  (define-fun l14 () Int
    0)
  (define-fun l5 () Int
    0)
  (define-fun l4 () Int
    0)
  (define-fun l23 () Int
    0)
  (define-fun l22 () Int
    0)
  (define-fun l25 () Int
    1)
  (define-fun s4 () Int
    1)
  (define-fun l21 () Int
    0)
  (define-fun l20 () Int
    0)
  (define-fun l19 () Int
    0)
  (define-fun l9 () Int
    0)
  (define-fun l18 () Int
    0)
  (define-fun l17 () Int
    0)
  (define-fun l16 () Int
    0)
  (define-fun l13 () Int
    0)
  (define-fun l12 () Int
    0)
  (define-fun l11 () Int
    0)
  (define-fun l10 () Int
    0)
  (define-fun l6 () Int
    0)
  (define-fun l8 () Int
    0)
  (define-fun l7 () Int
    0)
  (define-fun l3 () Int
    0)
  (define-fun l2 () Int
    0)
  (define-fun l1 () Int
    0)
  (define-fun l0 () Int
    0)
  (define-fun l24 () Int
    0)
  (define-fun s3 () Int
    0)
  (define-fun s1 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 0).
assignment(t5, 0).
assignment(t15, 0).
assignment(t12, 1).
assignment(t20, 0).
assignment(t21, 1).
assignment(t6, 1).
assignment(init1, 1).
assignment(t17, 1).
assignment(t14, 1).
assignment(t16, 0).
assignment(t7, 1).
assignment(t25, 0).
assignment(t26, 1).
assignment(t1, 1).
assignment(t23, 1).
assignment(t2, 0).
assignment(t4, 0).
assignment(t30, 0).
assignment(t8, 0).
assignment(t24, 1).
assignment(t19, 1).
assignment(t22, 0).
assignment(t13, 0).
assignment(t9, 1).
assignment(t11, 1).
assignment(t18, 0).
assignment(t29, 0).
assignment(t3, 1).
assignment(t28, 0).
assignment(t27, 0).
assignment(l15, 0).
assignment(s0, 0).
assignment(s2, 0).
assignment(l14, 0).
assignment(l5, 0).
assignment(l4, 0).
assignment(l23, 0).
assignment(l22, 0).
assignment(l25, 1).
assignment(s4, 1).
assignment(l21, 0).
assignment(l20, 0).
assignment(l19, 0).
assignment(l9, 0).
assignment(l18, 0).
assignment(l17, 0).
assignment(l16, 0).
assignment(l13, 0).
assignment(l12, 0).
assignment(l11, 0).
assignment(l10, 0).
assignment(l6, 0).
assignment(l8, 0).
assignment(l7, 0).
assignment(l3, 0).
assignment(l2, 0).
assignment(l1, 0).
assignment(l0, 0).
assignment(l24, 0).
assignment(s3, 0).
assignment(s1, 0).
- constraints C_theta...
(declare-fun s1 () Bool)
(declare-fun s3 () Bool)
(declare-fun l24 () Bool)
(declare-fun l0 () Bool)
(declare-fun l1 () Bool)
(declare-fun l2 () Bool)
(declare-fun l3 () Bool)
(declare-fun l7 () Bool)
(declare-fun l8 () Bool)
(declare-fun l6 () Bool)
(declare-fun l10 () Bool)
(declare-fun l11 () Bool)
(declare-fun l12 () Bool)
(declare-fun l13 () Bool)
(declare-fun l16 () Bool)
(declare-fun l17 () Bool)
(declare-fun l18 () Bool)
(declare-fun l9 () Bool)
(declare-fun l19 () Bool)
(declare-fun l20 () Bool)
(declare-fun l21 () Bool)
(declare-fun s4 () Bool)
(declare-fun l25 () Bool)
(declare-fun l22 () Bool)
(declare-fun l23 () Bool)
(declare-fun l4 () Bool)
(declare-fun l5 () Bool)
(declare-fun l14 () Bool)
(declare-fun s2 () Bool)
(declare-fun s0 () Bool)
(declare-fun l15 () Bool)

(assert (implies l0 (and (or s0 l2) (or s0 l1))))
(assert (implies l1 (or s0 l5)))
(assert (implies l2 (or s0 l3)))
(assert (implies l3 (or s2 l4)))
(assert (implies l7 (and (or s0 l9) (or s0 l8))))
(assert (implies l8 (or s0 l6)))
(assert (implies l6 (or s0 l7)))
(assert (implies l10 (and (or s0 l12) (or s0 l11))))
(assert (implies l11 (or s0 l15)))
(assert (implies l12 (or s0 l13)))
(assert (implies l13 (or s2 l14)))
(assert (implies l16 (and (or s0 l18) (or s0 l17))))
(assert (implies l17 (or s0 l19)))
(assert (implies l18 (or s0 l19)))
(assert (implies l9 (or s0 l10)))
(assert (implies l19 (and (or s0 l20) (or s0 l9))))
(assert (implies l20 (and (or s0 l23) (or s0 l21))))
(assert (implies l21 (or s4 l25)))
(assert (implies l22 (or l22 s0)))
(assert (implies l23 (or l23 s0)))
(assert (implies l4 (or s0 l5)))
(assert (implies l5 (or s0 l6)))
(assert (implies l14 (or s0 l15)))
(assert (implies s2 (and (or s0 l15) (or s0 l5))))
(assert (implies s0 (and (or l23 s0) (or l22 s0) (or s4 l25) (or s0 l23) (or s0 l21) (or s0 l20) (or s0 l9) (or s0 l19) (or s0 l19) (or s0 l18) (or s0 l17) (or s0 l16) (or s2 l14) (or s0 l13) (or s0 l15) (or s0 l12) (or s0 l11) (or s0 l10) (or s0 l6) (or s0 l9) (or s0 l8) (or s0 l7) (or s0 l6) (or s2 l4) (or s0 l3) (or s0 l5) (or s0 l2) (or s0 l1))))
(assert (implies l15 (or s0 l16)))

(assert (or s0 l0))

(assert (not l25))
(assert (not s4))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 66 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

