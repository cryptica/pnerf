PETRINIZER: The checker for Petri Nets
[benchmarks/given-by-daniel-kroening/cprover_software_analysis/spin2003_vs_satabs.1/main.spec.pl]

* Constructing petri net N from input file
place(s6, [], []).
place(s7, [], []).
place(s8, [t8], []).
place(l17, [t8], []).
place(l0, [], [t13,t12,t2,t1]).
place(l1, [t13,t12,t2,t1], [t14,t3]).
place(l8, [t17,t6], [t18,t7]).
place(l9, [t18,t7], [t19,t8]).
place(l10, [t19], [t20,t9]).
place(l2, [t21,t14,t10,t3], [t15,t4]).
place(l15, [], [t22,t11]).
place(l16, [t22,t11], []).
place(l14, [t24,t23], [t21,t10]).
place(s4, [t27,t25,t9,t5], [t28,t27,t26,t25]).
place(l5, [t16,t5], [t29,t25]).
place(l6, [t29,t25], [t30,t26]).
place(l7, [t30,t26], [t17,t6]).
place(l11, [t20,t9], [t31,t27]).
place(l12, [t31,t27], [t32,t28]).
place(s5, [t31,t29,t20,t16], [t32,t31,t30,t29]).
place(l13, [t32,t28], []).
place(s0, [t28,t26,t23,t17,t12,t11,t10,t6,t4,t1], [t33,t11,t10,t9,t8,t7,t6,t5,t4,t3,t2,t1]).
place(s2, [t33], [t23]).
place(s1, [t32,t30,t24,t22,t21,t19,t18,t15,t14,t13,t7,t3,t2], [t34,t22,t21,t20,t19,t18,t17,t16,t15,t14,t13,t12]).
place(l3, [t34,t33,t15,t4], [t34,t33,t24,t23]).
place(s3, [t34], [t24]).
place(l4, [t34,t33], [t16,t5]).

transition(t1, [l0,s0], [s0,l1]).
transition(t2, [l0,s0], [s1,l1]).
transition(t3, [l1,s0], [s1,l2]).
transition(t4, [l2,s0], [s0,l3]).
transition(t5, [l4,s0], [s4,l5]).
transition(t6, [l7,s0], [s0,l8]).
transition(t7, [l8,s0], [s1,l9]).
transition(t8, [l9,s0], [s8,l17]).
transition(t9, [l10,s0], [s4,l11]).
transition(t10, [l14,s0], [s0,l2]).
transition(t11, [l15,s0], [s0,l16]).
transition(t12, [l0,s1], [s0,l1]).
transition(t13, [l0,s1], [s1,l1]).
transition(t14, [l1,s1], [s1,l2]).
transition(t15, [l2,s1], [s1,l3]).
transition(t16, [l4,s1], [s5,l5]).
transition(t17, [l7,s1], [s0,l8]).
transition(t18, [l8,s1], [s1,l9]).
transition(t19, [l9,s1], [s1,l10]).
transition(t20, [l10,s1], [s5,l11]).
transition(t21, [l14,s1], [s1,l2]).
transition(t22, [l15,s1], [s1,l16]).
transition(t23, [l3,s2], [s0,l14]).
transition(t24, [l3,s3], [s1,l14]).
transition(t25, [l5,s4], [s4,l6]).
transition(t26, [l6,s4], [s0,l7]).
transition(t27, [l11,s4], [s4,l12]).
transition(t28, [l12,s4], [s0,l13]).
transition(t29, [l5,s5], [s5,l6]).
transition(t30, [l6,s5], [s1,l7]).
transition(t31, [l11,s5], [s5,l12]).
transition(t32, [l12,s5], [s1,l13]).
transition(t33, [l3,s0], [l3,s2,l4]).
transition(t34, [l3,s1], [l3,s3,l4]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s8 1)').
cond('(>= l17 1)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s6 () Int)
(declare-fun s7 () Int)
(declare-fun s8 () Int)
(declare-fun l17 () Int)
(declare-fun l0 () Int)
(declare-fun l1 () Int)
(declare-fun l8 () Int)
(declare-fun l9 () Int)
(declare-fun l10 () Int)
(declare-fun l2 () Int)
(declare-fun l15 () Int)
(declare-fun l16 () Int)
(declare-fun l14 () Int)
(declare-fun s4 () Int)
(declare-fun l5 () Int)
(declare-fun l6 () Int)
(declare-fun l7 () Int)
(declare-fun l11 () Int)
(declare-fun l12 () Int)
(declare-fun s5 () Int)
(declare-fun l13 () Int)
(declare-fun s0 () Int)
(declare-fun s2 () Int)
(declare-fun s1 () Int)
(declare-fun l3 () Int)
(declare-fun s3 () Int)
(declare-fun l4 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(declare-fun t14 () Int)
(declare-fun t15 () Int)
(declare-fun t16 () Int)
(declare-fun t17 () Int)
(declare-fun t18 () Int)
(declare-fun t19 () Int)
(declare-fun t20 () Int)
(declare-fun t21 () Int)
(declare-fun t22 () Int)
(declare-fun t23 () Int)
(declare-fun t24 () Int)
(declare-fun t25 () Int)
(declare-fun t26 () Int)
(declare-fun t27 () Int)
(declare-fun t28 () Int)
(declare-fun t29 () Int)
(declare-fun t30 () Int)
(declare-fun t31 () Int)
(declare-fun t32 () Int)
(declare-fun t33 () Int)
(declare-fun t34 () Int)
(assert (>= s6 0))
(assert (>= s7 0))
(assert (>= s8 0))
(assert (>= l17 0))
(assert (>= l0 0))
(assert (>= l1 0))
(assert (>= l8 0))
(assert (>= l9 0))
(assert (>= l10 0))
(assert (>= l2 0))
(assert (>= l15 0))
(assert (>= l16 0))
(assert (>= l14 0))
(assert (>= s4 0))
(assert (>= l5 0))
(assert (>= l6 0))
(assert (>= l7 0))
(assert (>= l11 0))
(assert (>= l12 0))
(assert (>= s5 0))
(assert (>= l13 0))
(assert (>= s0 0))
(assert (>= s2 0))
(assert (>= s1 0))
(assert (>= l3 0))
(assert (>= s3 0))
(assert (>= l4 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (>= t14 0))
(assert (>= t15 0))
(assert (>= t16 0))
(assert (>= t17 0))
(assert (>= t18 0))
(assert (>= t19 0))
(assert (>= t20 0))
(assert (>= t21 0))
(assert (>= t22 0))
(assert (>= t23 0))
(assert (>= t24 0))
(assert (>= t25 0))
(assert (>= t26 0))
(assert (>= t27 0))
(assert (>= t28 0))
(assert (>= t29 0))
(assert (>= t30 0))
(assert (>= t31 0))
(assert (>= t32 0))
(assert (>= t33 0))
(assert (>= t34 0))
(assert (= s6 (+ 0)))
(assert (= s7 (+ 0)))
(assert (= s8 (+ 0 t8)))
(assert (= l17 (+ 0 t8)))
(assert (= l0 (+ init1 (- t1) (- t12) (- t13) (- t2))))
(assert (= l1 (+ 0 t1 t12 t13 t2 (- t14) (- t3))))
(assert (= l8 (+ 0 t17 t6 (- t18) (- t7))))
(assert (= l9 (+ 0 t18 t7 (- t19) (- t8))))
(assert (= l10 (+ 0 t19 (- t20) (- t9))))
(assert (= l2 (+ 0 t10 t14 t21 t3 (- t15) (- t4))))
(assert (= l15 (+ 0 (- t11) (- t22))))
(assert (= l16 (+ 0 t11 t22)))
(assert (= l14 (+ 0 t23 t24 (- t10) (- t21))))
(assert (= s4 (+ 0 t5 t9 (- t26) (- t28))))
(assert (= l5 (+ 0 t16 t5 (- t25) (- t29))))
(assert (= l6 (+ 0 t25 t29 (- t26) (- t30))))
(assert (= l7 (+ 0 t26 t30 (- t17) (- t6))))
(assert (= l11 (+ 0 t20 t9 (- t27) (- t31))))
(assert (= l12 (+ 0 t27 t31 (- t28) (- t32))))
(assert (= s5 (+ 0 t16 t20 (- t30) (- t32))))
(assert (= l13 (+ 0 t28 t32)))
(assert (= s0 (+ 1 t12 t17 t23 t26 t28 (- t2) (- t3) (- t33) (- t5) (- t7) (- t8) (- t9))))
(assert (= s2 (+ 0 t33 (- t23))))
(assert (= s1 (+ 0 t2 t24 t3 t30 t32 t7 (- t12) (- t16) (- t17) (- t20) (- t34))))
(assert (= l3 (+ 0 t15 t4 (- t23) (- t24))))
(assert (= s3 (+ 0 t34 (- t24))))
(assert (= l4 (+ 0 t33 t34 (- t16) (- t5))))
(assert (>= init1 1))
(assert (>= s8 1))
(assert (>= l17 1))
(check-sat)
(get-model)

* Checking SAT(C0)
sat
(model 
  (define-fun t3 () Int
    0)
  (define-fun t28 () Int
    0)
  (define-fun t5 () Int
    0)
  (define-fun t15 () Int
    0)
  (define-fun t12 () Int
    0)
  (define-fun t20 () Int
    0)
  (define-fun t21 () Int
    0)
  (define-fun t6 () Int
    1)
  (define-fun init1 () Int
    1)
  (define-fun t17 () Int
    0)
  (define-fun t26 () Int
    0)
  (define-fun t14 () Int
    0)
  (define-fun t16 () Int
    1)
  (define-fun t7 () Int
    0)
  (define-fun t25 () Int
    1)
  (define-fun t33 () Int
    1)
  (define-fun t1 () Int
    0)
  (define-fun t31 () Int
    0)
  (define-fun t23 () Int
    1)
  (define-fun t2 () Int
    0)
  (define-fun t4 () Int
    1)
  (define-fun t30 () Int
    1)
  (define-fun t8 () Int
    1)
  (define-fun t24 () Int
    0)
  (define-fun t32 () Int
    0)
  (define-fun t19 () Int
    0)
  (define-fun t34 () Int
    0)
  (define-fun t22 () Int
    0)
  (define-fun t13 () Int
    0)
  (define-fun t11 () Int
    0)
  (define-fun t9 () Int
    0)
  (define-fun t18 () Int
    1)
  (define-fun t27 () Int
    0)
  (define-fun t29 () Int
    0)
  (define-fun t10 () Int
    1)
  (define-fun l4 () Int
    0)
  (define-fun s3 () Int
    0)
  (define-fun l3 () Int
    0)
  (define-fun s1 () Int
    0)
  (define-fun s2 () Int
    0)
  (define-fun s0 () Int
    0)
  (define-fun l13 () Int
    0)
  (define-fun s5 () Int
    0)
  (define-fun l12 () Int
    0)
  (define-fun l11 () Int
    0)
  (define-fun l7 () Int
    0)
  (define-fun l6 () Int
    0)
  (define-fun l5 () Int
    0)
  (define-fun s4 () Int
    0)
  (define-fun l14 () Int
    0)
  (define-fun l16 () Int
    0)
  (define-fun l15 () Int
    0)
  (define-fun l2 () Int
    0)
  (define-fun l10 () Int
    0)
  (define-fun l9 () Int
    0)
  (define-fun l8 () Int
    0)
  (define-fun l1 () Int
    0)
  (define-fun l0 () Int
    1)
  (define-fun l17 () Int
    1)
  (define-fun s8 () Int
    1)
  (define-fun s7 () Int
    0)
  (define-fun s6 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t3, 0).
assignment(t28, 0).
assignment(t5, 0).
assignment(t15, 0).
assignment(t12, 0).
assignment(t20, 0).
assignment(t21, 0).
assignment(t6, 1).
assignment(init1, 1).
assignment(t17, 0).
assignment(t26, 0).
assignment(t14, 0).
assignment(t16, 1).
assignment(t7, 0).
assignment(t25, 1).
assignment(t33, 1).
assignment(t1, 0).
assignment(t31, 0).
assignment(t23, 1).
assignment(t2, 0).
assignment(t4, 1).
assignment(t30, 1).
assignment(t8, 1).
assignment(t24, 0).
assignment(t32, 0).
assignment(t19, 0).
assignment(t34, 0).
assignment(t22, 0).
assignment(t13, 0).
assignment(t11, 0).
assignment(t9, 0).
assignment(t18, 1).
assignment(t27, 0).
assignment(t29, 0).
assignment(t10, 1).
assignment(l4, 0).
assignment(s3, 0).
assignment(l3, 0).
assignment(s1, 0).
assignment(s2, 0).
assignment(s0, 0).
assignment(l13, 0).
assignment(s5, 0).
assignment(l12, 0).
assignment(l11, 0).
assignment(l7, 0).
assignment(l6, 0).
assignment(l5, 0).
assignment(s4, 0).
assignment(l14, 0).
assignment(l16, 0).
assignment(l15, 0).
assignment(l2, 0).
assignment(l10, 0).
assignment(l9, 0).
assignment(l8, 0).
assignment(l1, 0).
assignment(l0, 1).
assignment(l17, 1).
assignment(s8, 1).
assignment(s7, 0).
assignment(s6, 0).
- constraints C_theta...
(declare-fun s6 () Bool)
(declare-fun s7 () Bool)
(declare-fun s8 () Bool)
(declare-fun l17 () Bool)
(declare-fun l0 () Bool)
(declare-fun l1 () Bool)
(declare-fun l8 () Bool)
(declare-fun l9 () Bool)
(declare-fun l10 () Bool)
(declare-fun l2 () Bool)
(declare-fun l15 () Bool)
(declare-fun l16 () Bool)
(declare-fun l14 () Bool)
(declare-fun s4 () Bool)
(declare-fun l5 () Bool)
(declare-fun l6 () Bool)
(declare-fun l7 () Bool)
(declare-fun l11 () Bool)
(declare-fun l12 () Bool)
(declare-fun s5 () Bool)
(declare-fun l13 () Bool)
(declare-fun s0 () Bool)
(declare-fun s2 () Bool)
(declare-fun s1 () Bool)
(declare-fun l3 () Bool)
(declare-fun s3 () Bool)
(declare-fun l4 () Bool)

(assert (implies l0 (and (or s1 l1) (or s0 l1) (or s1 l1) (or s0 l1))))
(assert (implies l1 (and (or s1 l2) (or s1 l2))))
(assert (implies l8 (and (or s1 l9) (or s1 l9))))
(assert (implies l9 (and (or s1 l10) (or s8 l17))))
(assert (implies l10 (and (or s5 l11) (or s4 l11))))
(assert (implies l2 (and (or s1 l3) (or s0 l3))))
(assert (implies l15 (and (or s1 l16) (or s0 l16))))
(assert (implies l14 (and (or s1 l2) (or s0 l2))))
(assert (implies s4 (and (or s0 l13) (or s4 l12) (or s0 l7) (or s4 l6))))
(assert (implies l5 (and (or s5 l6) (or s4 l6))))
(assert (implies l6 (and (or s1 l7) (or s0 l7))))
(assert (implies l7 (and (or s0 l8) (or s0 l8))))
(assert (implies l11 (and (or s5 l12) (or s4 l12))))
(assert (implies l12 (and (or s1 l13) (or s0 l13))))
(assert (implies s5 (and (or s1 l13) (or s5 l12) (or s1 l7) (or s5 l6))))
(assert (implies s0 (and (or l3 s2 l4) (or s0 l16) (or s0 l2) (or s4 l11) (or s8 l17) (or s1 l9) (or s0 l8) (or s4 l5) (or s0 l3) (or s1 l2) (or s1 l1) (or s0 l1))))
(assert (implies s2 (or s0 l14)))
(assert (implies s1 (and (or l3 s3 l4) (or s1 l16) (or s1 l2) (or s5 l11) (or s1 l10) (or s1 l9) (or s0 l8) (or s5 l5) (or s1 l3) (or s1 l2) (or s1 l1) (or s0 l1))))
(assert (implies l3 (and (or l3 s3 l4) (or l3 s2 l4) (or s1 l14) (or s0 l14))))
(assert (implies s3 (or s1 l14)))
(assert (implies l4 (and (or s5 l5) (or s4 l5))))

(assert (or s0 l0))

(assert (not l0))
(assert (not l17))
(assert (not s8))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 58 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

