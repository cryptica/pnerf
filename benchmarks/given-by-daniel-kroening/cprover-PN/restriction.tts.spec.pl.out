PETRINIZER: The checker for Petri Nets
[-v benchmarks/given-by-daniel-kroening/cprover-PN/restriction.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [], [t1]).
place(s1, [t1], [t2]).
place(s2, [t2], [t3]).
place(l2, [t1], [t5]).
place(l3, [t2], [t6]).
place(l1, [t6], [t4]).
place(l5, [t3], [t7]).
place(s4, [t5], [t7]).
place(l6, [t7,t5], []).
place(s5, [t6], [t8]).
place(l4, [t8], []).
place(s6, [t8], [t9]).
place(s3, [t9,t7,t4,t3], [t6,t5,t4]).
place(l7, [t9], []).
place(l0, [init1,t4], [t9,t8,t3,t2,t1]).

transition(t1, [l0,s0], [s1,l2]).
transition(t2, [l0,s1], [s2,l3]).
transition(t3, [l0,s2], [s3,l5]).
transition(t4, [l1,s3], [s3,l0]).
transition(t5, [l2,s3], [s4,l6]).
transition(t6, [l3,s3], [s5,l1]).
transition(t7, [l5,s4], [s3,l6]).
transition(t8, [l0,s5], [s6,l4]).
transition(t9, [l0,s6], [s3,l7]).
transition(init1, [], [l0]).

weight(l0, t1, 1).
weight(s0, t1, 1).
weight(t1, s1, 1).
weight(t1, l2, 1).
weight(l0, t2, 1).
weight(s1, t2, 1).
weight(t2, s2, 1).
weight(t2, l3, 1).
weight(l0, t3, 1).
weight(s2, t3, 1).
weight(t3, s3, 1).
weight(t3, l5, 1).
weight(l1, t4, 1).
weight(s3, t4, 1).
weight(t4, s3, 1).
weight(t4, l0, 1).
weight(l2, t5, 1).
weight(s3, t5, 1).
weight(t5, s4, 1).
weight(t5, l6, 1).
weight(l3, t6, 1).
weight(s3, t6, 1).
weight(t6, s5, 1).
weight(t6, l1, 1).
weight(l5, t7, 1).
weight(s4, t7, 1).
weight(t7, s3, 1).
weight(t7, l6, 1).
weight(l0, t8, 1).
weight(s5, t8, 1).
weight(t8, s6, 1).
weight(t8, l4, 1).
weight(l0, t9, 1).
weight(s6, t9, 1).
weight(t9, s3, 1).
weight(t9, l7, 1).
weight(init1, l0, 1).

init(l0, 1).
init(s0, 1).

cond('(>= s3 1)').
cond('(>= l7 2)').

target(s3, 1).
target(l7, 2).


* Constructing constraints C' for petri net N
(declare-fun s0 () Real)
(declare-fun s1 () Real)
(declare-fun s2 () Real)
(declare-fun l2 () Real)
(declare-fun l3 () Real)
(declare-fun l1 () Real)
(declare-fun l5 () Real)
(declare-fun s4 () Real)
(declare-fun l6 () Real)
(declare-fun s5 () Real)
(declare-fun l4 () Real)
(declare-fun s6 () Real)
(declare-fun s3 () Real)
(declare-fun l7 () Real)
(declare-fun l0 () Real)
(assert (>= 0 (+ (- l0) l2 (- s0) s1)))
(assert (>= 0 (+ (- l0) l3 (- s1) s2)))
(assert (>= 0 (+ (- l0) l5 (- s2) s3)))
(assert (>= 0 (+ l0 (- l1))))
(assert (>= 0 (+ (- l2) l6 (- s3) s4)))
(assert (>= 0 (+ l1 (- l3) (- s3) s5)))
(assert (>= 0 (+ (- l5) l6 s3 (- s4))))
(assert (>= 0 (+ (- l0) l4 (- s5) s6)))
(assert (>= 0 (+ (- l0) l7 s3 (- s6))))
(assert (>= 0 (+ l0)))
(assert (= 1 (+ 0 (- s0) s3 (* 2 l7) (- l0))))
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= l2 0))
(assert (>= l3 0))
(assert (>= l1 0))
(assert (>= l5 0))
(assert (>= s4 0))
(assert (>= l6 0))
(assert (>= s5 0))
(assert (>= l4 0))
(assert (>= s6 0))
(assert (>= s3 0))
(assert (>= l7 0))
(assert (>= l0 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun l7 () Real
    1.0)
  (define-fun l5 () Real
    0.0)
  (define-fun l2 () Real
    0.0)
  (define-fun l4 () Real
    0.0)
  (define-fun l6 () Real
    0.0)
  (define-fun s6 () Real
    1.0)
  (define-fun l0 () Real
    0.0)
  (define-fun s0 () Real
    1.0)
  (define-fun s2 () Real
    0.0)
  (define-fun s3 () Real
    0.0)
  (define-fun s1 () Real
    1.0)
  (define-fun s5 () Real
    1.0)
  (define-fun s4 () Real
    0.0)
  (define-fun l1 () Real
    0.0)
  (define-fun l3 () Real
    1.0)
)
- sat, getting model A' for C'
assignment('l7', 1.0).
assignment('l5', 0.0).
assignment('l2', 0.0).
assignment('l4', 0.0).
assignment('l6', 0.0).
assignment('s6', 1.0).
assignment('l0', 0.0).
assignment('s0', 1.0).
assignment('s2', 0.0).
assignment('s3', 0.0).
assignment('s1', 1.0).
assignment('s5', 1.0).
assignment('s4', 0.0).
assignment('l1', 0.0).
assignment('l3', 1.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ s0 s1 l3 s5 s6 l7)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ s0 s1 l3 s5 s6 l7)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


