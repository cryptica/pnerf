PETRINIZER: The checker for Petri Nets
[-v benchmarks/given-by-daniel-kroening/cprover-PN/csm.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [t1], [t2,t1]).
place(s1, [t2], [t3]).
place(s2, [t3], [t4]).
place(s3, [t4], [t5]).
place(l2, [t6], [t8,t7]).
place(l1, [t10,t9], [t6]).
place(l6, [t8,t7,t2], [t11]).
place(l5, [t11], [t10,t9]).
place(l8, [t15,t4,t1], [t13]).
place(l13, [t16], [t18]).
place(l12, [t18], [t17]).
place(s5, [t9], [t19]).
place(s6, [t10], [t20]).
place(l4, [t20], [t21]).
place(s7, [t7], [t21]).
place(l7, [t21,t14,t3], [t20,t12]).
place(l3, [t19], [t22]).
place(s8, [t8], [t22]).
place(l10, [t22,t12], [t19,t14]).
place(l9, [t17,t13], [t23]).
place(s9, [t12], [t23]).
place(s10, [t14], [t24]).
place(l11, [t24], [t16,t15]).
place(s11, [t17], [t25]).
place(l14, [t25,t5], [t26]).
place(s12, [t18], [t26]).
place(s4, [t26,t25,t24,t23,t22,t21,t20,t19,t16,t15,t13,t11,t6,t5], [t18,t17,t16,t15,t14,t13,t12,t11,t10,t9,t8,t7,t6]).
place(l0, [init1,t26,t23], [t25,t24,t5,t4,t3,t2,t1]).

transition(t1, [l0,s0], [s0,l8]).
transition(t2, [l0,s0], [s1,l6]).
transition(t3, [l0,s1], [s2,l7]).
transition(t4, [l0,s2], [s3,l8]).
transition(t5, [l0,s3], [s4,l14]).
transition(t6, [l1,s4], [s4,l2]).
transition(t7, [l2,s4], [s7,l6]).
transition(t8, [l2,s4], [s8,l6]).
transition(t9, [l5,s4], [s5,l1]).
transition(t10, [l5,s4], [s6,l1]).
transition(t11, [l6,s4], [s4,l5]).
transition(t12, [l7,s4], [s9,l10]).
transition(t13, [l8,s4], [s4,l9]).
transition(t14, [l10,s4], [s10,l7]).
transition(t15, [l11,s4], [s4,l8]).
transition(t16, [l11,s4], [s4,l13]).
transition(t17, [l12,s4], [s11,l9]).
transition(t18, [l13,s4], [s12,l12]).
transition(t19, [l10,s5], [s4,l3]).
transition(t20, [l7,s6], [s4,l4]).
transition(t21, [l4,s7], [s4,l7]).
transition(t22, [l3,s8], [s4,l10]).
transition(t23, [l9,s9], [s4,l0]).
transition(t24, [l0,s10], [s4,l11]).
transition(t25, [l0,s11], [s4,l14]).
transition(t26, [l14,s12], [s4,l0]).
transition(init1, [], [l0]).

weight(l0, t1, 1).
weight(s0, t1, 1).
weight(t1, s0, 1).
weight(t1, l8, 1).
weight(l0, t2, 1).
weight(s0, t2, 1).
weight(t2, s1, 1).
weight(t2, l6, 1).
weight(l0, t3, 1).
weight(s1, t3, 1).
weight(t3, s2, 1).
weight(t3, l7, 1).
weight(l0, t4, 1).
weight(s2, t4, 1).
weight(t4, s3, 1).
weight(t4, l8, 1).
weight(l0, t5, 1).
weight(s3, t5, 1).
weight(t5, s4, 1).
weight(t5, l14, 1).
weight(l1, t6, 1).
weight(s4, t6, 1).
weight(t6, s4, 1).
weight(t6, l2, 1).
weight(l2, t7, 1).
weight(s4, t7, 1).
weight(t7, s7, 1).
weight(t7, l6, 1).
weight(l2, t8, 1).
weight(s4, t8, 1).
weight(t8, s8, 1).
weight(t8, l6, 1).
weight(l5, t9, 1).
weight(s4, t9, 1).
weight(t9, s5, 1).
weight(t9, l1, 1).
weight(l5, t10, 1).
weight(s4, t10, 1).
weight(t10, s6, 1).
weight(t10, l1, 1).
weight(l6, t11, 1).
weight(s4, t11, 1).
weight(t11, s4, 1).
weight(t11, l5, 1).
weight(l7, t12, 1).
weight(s4, t12, 1).
weight(t12, s9, 1).
weight(t12, l10, 1).
weight(l8, t13, 1).
weight(s4, t13, 1).
weight(t13, s4, 1).
weight(t13, l9, 1).
weight(l10, t14, 1).
weight(s4, t14, 1).
weight(t14, s10, 1).
weight(t14, l7, 1).
weight(l11, t15, 1).
weight(s4, t15, 1).
weight(t15, s4, 1).
weight(t15, l8, 1).
weight(l11, t16, 1).
weight(s4, t16, 1).
weight(t16, s4, 1).
weight(t16, l13, 1).
weight(l12, t17, 1).
weight(s4, t17, 1).
weight(t17, s11, 1).
weight(t17, l9, 1).
weight(l13, t18, 1).
weight(s4, t18, 1).
weight(t18, s12, 1).
weight(t18, l12, 1).
weight(l10, t19, 1).
weight(s5, t19, 1).
weight(t19, s4, 1).
weight(t19, l3, 1).
weight(l7, t20, 1).
weight(s6, t20, 1).
weight(t20, s4, 1).
weight(t20, l4, 1).
weight(l4, t21, 1).
weight(s7, t21, 1).
weight(t21, s4, 1).
weight(t21, l7, 1).
weight(l3, t22, 1).
weight(s8, t22, 1).
weight(t22, s4, 1).
weight(t22, l10, 1).
weight(l9, t23, 1).
weight(s9, t23, 1).
weight(t23, s4, 1).
weight(t23, l0, 1).
weight(l0, t24, 1).
weight(s10, t24, 1).
weight(t24, s4, 1).
weight(t24, l11, 1).
weight(l0, t25, 1).
weight(s11, t25, 1).
weight(t25, s4, 1).
weight(t25, l14, 1).
weight(l14, t26, 1).
weight(s12, t26, 1).
weight(t26, s4, 1).
weight(t26, l0, 1).
weight(init1, l0, 1).

init(l0, 1).
init(s0, 1).

cond('(>= s4 1)').
cond('(>= l10 2)').

target(s4, 1).
target(l10, 2).


* Constructing constraints C' for petri net N
(declare-fun s0 () Real)
(declare-fun s1 () Real)
(declare-fun s2 () Real)
(declare-fun s3 () Real)
(declare-fun l2 () Real)
(declare-fun l1 () Real)
(declare-fun l6 () Real)
(declare-fun l5 () Real)
(declare-fun l8 () Real)
(declare-fun l13 () Real)
(declare-fun l12 () Real)
(declare-fun s5 () Real)
(declare-fun s6 () Real)
(declare-fun l4 () Real)
(declare-fun s7 () Real)
(declare-fun l7 () Real)
(declare-fun l3 () Real)
(declare-fun s8 () Real)
(declare-fun l10 () Real)
(declare-fun l9 () Real)
(declare-fun s9 () Real)
(declare-fun s10 () Real)
(declare-fun l11 () Real)
(declare-fun s11 () Real)
(declare-fun l14 () Real)
(declare-fun s12 () Real)
(declare-fun s4 () Real)
(declare-fun l0 () Real)
(assert (>= 0 (+ (- l0) l8)))
(assert (>= 0 (+ (- l0) l6 (- s0) s1)))
(assert (>= 0 (+ (- l0) l7 (- s1) s2)))
(assert (>= 0 (+ (- l0) l8 (- s2) s3)))
(assert (>= 0 (+ (- l0) l14 (- s3) s4)))
(assert (>= 0 (+ (- l1) l2)))
(assert (>= 0 (+ (- l2) l6 (- s4) s7)))
(assert (>= 0 (+ (- l2) l6 (- s4) s8)))
(assert (>= 0 (+ l1 (- l5) (- s4) s5)))
(assert (>= 0 (+ l1 (- l5) (- s4) s6)))
(assert (>= 0 (+ l5 (- l6))))
(assert (>= 0 (+ l10 (- l7) (- s4) s9)))
(assert (>= 0 (+ (- l8) l9)))
(assert (>= 0 (+ (- l10) l7 s10 (- s4))))
(assert (>= 0 (+ (- l11) l8)))
(assert (>= 0 (+ (- l11) l13)))
(assert (>= 0 (+ (- l12) l9 s11 (- s4))))
(assert (>= 0 (+ l12 (- l13) s12 (- s4))))
(assert (>= 0 (+ (- l10) l3 s4 (- s5))))
(assert (>= 0 (+ l4 (- l7) s4 (- s6))))
(assert (>= 0 (+ (- l4) l7 s4 (- s7))))
(assert (>= 0 (+ l10 (- l3) s4 (- s8))))
(assert (>= 0 (+ l0 (- l9) s4 (- s9))))
(assert (>= 0 (+ (- l0) l11 (- s10) s4)))
(assert (>= 0 (+ (- l0) l14 (- s11) s4)))
(assert (>= 0 (+ l0 (- l14) (- s12) s4)))
(assert (>= 0 (+ l0)))
(assert (= 1 (+ 0 (- s0) (* 2 l10) s4 (- l0))))
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= s3 0))
(assert (>= l2 0))
(assert (>= l1 0))
(assert (>= l6 0))
(assert (>= l5 0))
(assert (>= l8 0))
(assert (>= l13 0))
(assert (>= l12 0))
(assert (>= s5 0))
(assert (>= s6 0))
(assert (>= l4 0))
(assert (>= s7 0))
(assert (>= l7 0))
(assert (>= l3 0))
(assert (>= s8 0))
(assert (>= l10 0))
(assert (>= l9 0))
(assert (>= s9 0))
(assert (>= s10 0))
(assert (>= l11 0))
(assert (>= s11 0))
(assert (>= l14 0))
(assert (>= s12 0))
(assert (>= s4 0))
(assert (>= l0 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun s7 () Real
    0.0)
  (define-fun l5 () Real
    0.0)
  (define-fun s8 () Real
    0.0)
  (define-fun l4 () Real
    1.0)
  (define-fun s11 () Real
    0.0)
  (define-fun l14 () Real
    0.0)
  (define-fun l9 () Real
    0.0)
  (define-fun s2 () Real
    0.0)
  (define-fun l13 () Real
    0.0)
  (define-fun l10 () Real
    1.0)
  (define-fun s12 () Real
    0.0)
  (define-fun l11 () Real
    0.0)
  (define-fun l1 () Real
    0.0)
  (define-fun s10 () Real
    0.0)
  (define-fun l7 () Real
    1.0)
  (define-fun s9 () Real
    0.0)
  (define-fun l2 () Real
    0.0)
  (define-fun s6 () Real
    0.0)
  (define-fun l6 () Real
    0.0)
  (define-fun l0 () Real
    0.0)
  (define-fun l12 () Real
    0.0)
  (define-fun s0 () Real
    1.0)
  (define-fun s3 () Real
    0.0)
  (define-fun s1 () Real
    1.0)
  (define-fun l8 () Real
    0.0)
  (define-fun s5 () Real
    0.0)
  (define-fun s4 () Real
    0.0)
  (define-fun l3 () Real
    1.0)
)
- sat, getting model A' for C'
assignment('s7', 0.0).
assignment('l5', 0.0).
assignment('s8', 0.0).
assignment('l4', 1.0).
assignment('s11', 0.0).
assignment('l14', 0.0).
assignment('l9', 0.0).
assignment('s2', 0.0).
assignment('l13', 0.0).
assignment('l10', 1.0).
assignment('s12', 0.0).
assignment('l11', 0.0).
assignment('l1', 0.0).
assignment('s10', 0.0).
assignment('l7', 1.0).
assignment('s9', 0.0).
assignment('l2', 0.0).
assignment('s6', 0.0).
assignment('l6', 0.0).
assignment('l0', 0.0).
assignment('l12', 0.0).
assignment('s0', 1.0).
assignment('s3', 0.0).
assignment('s1', 1.0).
assignment('l8', 0.0).
assignment('s5', 0.0).
assignment('s4', 0.0).
assignment('l3', 1.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ s0 s1 l4 l7 l3 l10)))

* Invariant I for the petri net:
(assert (>= 1.0 (+ s0 s1 l4 l7 l3 l10)))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


