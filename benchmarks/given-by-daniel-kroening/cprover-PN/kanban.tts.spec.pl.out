PETRINIZER: The checker for Petri Nets
[benchmarks/given-by-daniel-kroening/cprover-PN/kanban.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [t4,t3,t2,t1], [t5,t4,t3,t2,t1]).
place(s1, [t5], [t6]).
place(s2, [t6], [t7]).
place(l0, [], [t8,t7,t6,t5,t4,t3,t2,t1]).
place(s3, [t7], [t8]).
place(l2, [t9], [t11]).
place(l1, [t12,t11], [t10,t9]).
place(l4, [t10], [t13]).
place(l3, [t13,t5,t1], [t12]).
place(l6, [t14], [t16]).
place(l8, [t15], [t17]).
place(l10, [t18], [t20]).
place(l14, [t21], [t23]).
place(l16, [t22], [t24]).
place(l7, [t17,t6,t2], [t25]).
place(s5, [t13], [t25]).
place(l5, [t25,t16], [t15,t14]).
place(s6, [t25], [t26]).
place(l9, [t26,t20], [t19,t18]).
place(l12, [t19], [t27]).
place(s7, [t17], [t27]).
place(l11, [t27,t7,t3], [t26]).
place(l15, [t24,t8,t4], [t28]).
place(s8, [t27], [t28]).
place(s4, [t28,t26,t24,t23,t22,t21,t20,t19,t18,t16,t15,t14,t12,t11,t10,t9,t8], [t24,t23,t22,t21,t20,t19,t18,t17,t16,t15,t14,t13,t12,t11,t10,t9]).
place(l13, [t28,t23], [t22,t21]).

transition(t1, [l0,s0], [s0,l3]).
transition(t2, [l0,s0], [s0,l7]).
transition(t3, [l0,s0], [s0,l11]).
transition(t4, [l0,s0], [s0,l15]).
transition(t5, [l0,s0], [s1,l3]).
transition(t6, [l0,s1], [s2,l7]).
transition(t7, [l0,s2], [s3,l11]).
transition(t8, [l0,s3], [s4,l15]).
transition(t9, [l1,s4], [s4,l2]).
transition(t10, [l1,s4], [s4,l4]).
transition(t11, [l2,s4], [s4,l1]).
transition(t12, [l3,s4], [s4,l1]).
transition(t13, [l4,s4], [s5,l3]).
transition(t14, [l5,s4], [s4,l6]).
transition(t15, [l5,s4], [s4,l8]).
transition(t16, [l6,s4], [s4,l5]).
transition(t17, [l8,s4], [s7,l7]).
transition(t18, [l9,s4], [s4,l10]).
transition(t19, [l9,s4], [s4,l12]).
transition(t20, [l10,s4], [s4,l9]).
transition(t21, [l13,s4], [s4,l14]).
transition(t22, [l13,s4], [s4,l16]).
transition(t23, [l14,s4], [s4,l13]).
transition(t24, [l16,s4], [s4,l15]).
transition(t25, [l7,s5], [s6,l5]).
transition(t26, [l11,s6], [s4,l9]).
transition(t27, [l12,s7], [s8,l11]).
transition(t28, [l15,s8], [s4,l13]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s4 1)').
cond('(>= l5 2)').
cond('(>= l7 4)').
cond('(>= l11 4)').
cond('(>= l14 6)').
cond('(>= l15 4)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun s0 () Int)
(declare-fun s1 () Int)
(declare-fun s2 () Int)
(declare-fun l0 () Int)
(declare-fun s3 () Int)
(declare-fun l2 () Int)
(declare-fun l1 () Int)
(declare-fun l4 () Int)
(declare-fun l3 () Int)
(declare-fun l6 () Int)
(declare-fun l8 () Int)
(declare-fun l10 () Int)
(declare-fun l14 () Int)
(declare-fun l16 () Int)
(declare-fun l7 () Int)
(declare-fun s5 () Int)
(declare-fun l5 () Int)
(declare-fun s6 () Int)
(declare-fun l9 () Int)
(declare-fun l12 () Int)
(declare-fun s7 () Int)
(declare-fun l11 () Int)
(declare-fun l15 () Int)
(declare-fun s8 () Int)
(declare-fun s4 () Int)
(declare-fun l13 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(declare-fun t14 () Int)
(declare-fun t15 () Int)
(declare-fun t16 () Int)
(declare-fun t17 () Int)
(declare-fun t18 () Int)
(declare-fun t19 () Int)
(declare-fun t20 () Int)
(declare-fun t21 () Int)
(declare-fun t22 () Int)
(declare-fun t23 () Int)
(declare-fun t24 () Int)
(declare-fun t25 () Int)
(declare-fun t26 () Int)
(declare-fun t27 () Int)
(declare-fun t28 () Int)
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= l0 0))
(assert (>= s3 0))
(assert (>= l2 0))
(assert (>= l1 0))
(assert (>= l4 0))
(assert (>= l3 0))
(assert (>= l6 0))
(assert (>= l8 0))
(assert (>= l10 0))
(assert (>= l14 0))
(assert (>= l16 0))
(assert (>= l7 0))
(assert (>= s5 0))
(assert (>= l5 0))
(assert (>= s6 0))
(assert (>= l9 0))
(assert (>= l12 0))
(assert (>= s7 0))
(assert (>= l11 0))
(assert (>= l15 0))
(assert (>= s8 0))
(assert (>= s4 0))
(assert (>= l13 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (>= t14 0))
(assert (>= t15 0))
(assert (>= t16 0))
(assert (>= t17 0))
(assert (>= t18 0))
(assert (>= t19 0))
(assert (>= t20 0))
(assert (>= t21 0))
(assert (>= t22 0))
(assert (>= t23 0))
(assert (>= t24 0))
(assert (>= t25 0))
(assert (>= t26 0))
(assert (>= t27 0))
(assert (>= t28 0))
(assert (= s0 (+ 1 (- t5))))
(assert (= s1 (+ 0 t5 (- t6))))
(assert (= s2 (+ 0 t6 (- t7))))
(assert (= l0 (+ init1 (- t1) (- t2) (- t3) (- t4) (- t5) (- t6) (- t7) (- t8))))
(assert (= s3 (+ 0 t7 (- t8))))
(assert (= l2 (+ 0 t9 (- t11))))
(assert (= l1 (+ 0 t11 t12 (- t10) (- t9))))
(assert (= l4 (+ 0 t10 (- t13))))
(assert (= l3 (+ 0 t1 t13 t5 (- t12))))
(assert (= l6 (+ 0 t14 (- t16))))
(assert (= l8 (+ 0 t15 (- t17))))
(assert (= l10 (+ 0 t18 (- t20))))
(assert (= l14 (+ 0 t21 (- t23))))
(assert (= l16 (+ 0 t22 (- t24))))
(assert (= l7 (+ 0 t17 t2 t6 (- t25))))
(assert (= s5 (+ 0 t13 (- t25))))
(assert (= l5 (+ 0 t16 t25 (- t14) (- t15))))
(assert (= s6 (+ 0 t25 (- t26))))
(assert (= l9 (+ 0 t20 t26 (- t18) (- t19))))
(assert (= l12 (+ 0 t19 (- t27))))
(assert (= s7 (+ 0 t17 (- t27))))
(assert (= l11 (+ 0 t27 t3 t7 (- t26))))
(assert (= l15 (+ 0 t24 t4 t8 (- t28))))
(assert (= s8 (+ 0 t27 (- t28))))
(assert (= s4 (+ 0 t26 t28 t8 (- t13) (- t17))))
(assert (= l13 (+ 0 t23 t28 (- t21) (- t22))))
(assert (>= init1 1))
(assert (>= s4 1))
(assert (>= l5 2))
(assert (>= l7 4))
(assert (>= l11 4))
(assert (>= l14 6))
(assert (>= l15 4))
(check-sat)
(get-model)

* Checking SAT(C0)
sat
(model 
  (define-fun t10 () Int
    8)
  (define-fun t28 () Int
    6)
  (define-fun t5 () Int
    1)
  (define-fun t15 () Int
    6)
  (define-fun t12 () Int
    8)
  (define-fun t20 () Int
    0)
  (define-fun t21 () Int
    6)
  (define-fun t6 () Int
    1)
  (define-fun init1 () Int
    23)
  (define-fun t17 () Int
    6)
  (define-fun t25 () Int
    8)
  (define-fun t14 () Int
    0)
  (define-fun t16 () Int
    0)
  (define-fun t7 () Int
    1)
  (define-fun t26 () Int
    8)
  (define-fun t1 () Int
    0)
  (define-fun t23 () Int
    0)
  (define-fun t2 () Int
    5)
  (define-fun t4 () Int
    9)
  (define-fun t8 () Int
    1)
  (define-fun t24 () Int
    0)
  (define-fun t19 () Int
    8)
  (define-fun t22 () Int
    0)
  (define-fun t13 () Int
    8)
  (define-fun t9 () Int
    0)
  (define-fun t11 () Int
    0)
  (define-fun t18 () Int
    0)
  (define-fun t27 () Int
    6)
  (define-fun t3 () Int
    5)
  (define-fun l13 () Int
    0)
  (define-fun s4 () Int
    1)
  (define-fun s8 () Int
    0)
  (define-fun l15 () Int
    4)
  (define-fun l11 () Int
    4)
  (define-fun s7 () Int
    0)
  (define-fun l12 () Int
    2)
  (define-fun l9 () Int
    0)
  (define-fun s6 () Int
    0)
  (define-fun l5 () Int
    2)
  (define-fun s5 () Int
    0)
  (define-fun l7 () Int
    4)
  (define-fun l16 () Int
    0)
  (define-fun l14 () Int
    6)
  (define-fun l10 () Int
    0)
  (define-fun l8 () Int
    0)
  (define-fun l6 () Int
    0)
  (define-fun l3 () Int
    1)
  (define-fun l4 () Int
    0)
  (define-fun l1 () Int
    0)
  (define-fun l2 () Int
    0)
  (define-fun s3 () Int
    0)
  (define-fun l0 () Int
    0)
  (define-fun s2 () Int
    0)
  (define-fun s1 () Int
    0)
  (define-fun s0 () Int
    0)
)

* Constructing trap constraints C_theta for model A
- model A...
assignment(t10, 8).
assignment(t28, 6).
assignment(t5, 1).
assignment(t15, 6).
assignment(t12, 8).
assignment(t20, 0).
assignment(t21, 6).
assignment(t6, 1).
assignment(init1, 23).
assignment(t17, 6).
assignment(t25, 8).
assignment(t14, 0).
assignment(t16, 0).
assignment(t7, 1).
assignment(t26, 8).
assignment(t1, 0).
assignment(t23, 0).
assignment(t2, 5).
assignment(t4, 9).
assignment(t8, 1).
assignment(t24, 0).
assignment(t19, 8).
assignment(t22, 0).
assignment(t13, 8).
assignment(t9, 0).
assignment(t11, 0).
assignment(t18, 0).
assignment(t27, 6).
assignment(t3, 5).
assignment(l13, 0).
assignment(s4, 1).
assignment(s8, 0).
assignment(l15, 4).
assignment(l11, 4).
assignment(s7, 0).
assignment(l12, 2).
assignment(l9, 0).
assignment(s6, 0).
assignment(l5, 2).
assignment(s5, 0).
assignment(l7, 4).
assignment(l16, 0).
assignment(l14, 6).
assignment(l10, 0).
assignment(l8, 0).
assignment(l6, 0).
assignment(l3, 1).
assignment(l4, 0).
assignment(l1, 0).
assignment(l2, 0).
assignment(s3, 0).
assignment(l0, 0).
assignment(s2, 0).
assignment(s1, 0).
assignment(s0, 0).

- constraints C_theta...
(declare-fun s0 () Bool)
(declare-fun s1 () Bool)
(declare-fun s2 () Bool)
(declare-fun l0 () Bool)
(declare-fun s3 () Bool)
(declare-fun l2 () Bool)
(declare-fun l1 () Bool)
(declare-fun l4 () Bool)
(declare-fun l3 () Bool)
(declare-fun l6 () Bool)
(declare-fun l8 () Bool)
(declare-fun l10 () Bool)
(declare-fun l14 () Bool)
(declare-fun l16 () Bool)
(declare-fun l7 () Bool)
(declare-fun s5 () Bool)
(declare-fun l5 () Bool)
(declare-fun s6 () Bool)
(declare-fun l9 () Bool)
(declare-fun l12 () Bool)
(declare-fun s7 () Bool)
(declare-fun l11 () Bool)
(declare-fun l15 () Bool)
(declare-fun s8 () Bool)
(declare-fun s4 () Bool)
(declare-fun l13 () Bool)

(assert (implies s0 (and (or s1 l3) (or s0 l15) (or s0 l11) (or s0 l7) (or s0 l3))))
(assert (implies s1 (or s2 l7)))
(assert (implies s2 (or s3 l11)))
(assert (implies l0 (and (or s4 l15) (or s3 l11) (or s2 l7) (or s1 l3) (or s0 l15) (or s0 l11) (or s0 l7) (or s0 l3))))
(assert (implies s3 (or s4 l15)))
(assert (implies l2 (or s4 l1)))
(assert (implies l1 (and (or s4 l4) (or s4 l2))))
(assert (implies l4 (or s5 l3)))
(assert (implies l3 (or s4 l1)))
(assert (implies l6 (or s4 l5)))
(assert (implies l8 (or s7 l7)))
(assert (implies l10 (or s4 l9)))
(assert (implies l14 (or s4 l13)))
(assert (implies l16 (or s4 l15)))
(assert (implies l7 (or s6 l5)))
(assert (implies s5 (or s6 l5)))
(assert (implies l5 (and (or s4 l8) (or s4 l6))))
(assert (implies s6 (or s4 l9)))
(assert (implies l9 (and (or s4 l12) (or s4 l10))))
(assert (implies l12 (or s8 l11)))
(assert (implies s7 (or s8 l11)))
(assert (implies l11 (or s4 l9)))
(assert (implies l15 (or s4 l13)))
(assert (implies s8 (or s4 l13)))
(assert (implies s4 (and (or s4 l15) (or s4 l13) (or s4 l16) (or s4 l14) (or s4 l9) (or s4 l12) (or s4 l10) (or s7 l7) (or s4 l5) (or s4 l8) (or s4 l6) (or s5 l3) (or s4 l1) (or s4 l1) (or s4 l4) (or s4 l2))))
(assert (implies l13 (and (or s4 l16) (or s4 l14))))

(assert (or s0 l0))

(assert (not s4))
(assert (not l15))
(assert (not l11))
(assert (not l12))
(assert (not l5))
(assert (not l7))
(assert (not l14))
(assert (not l3))

(check-sat)
(get-model)

* Checking SAT(C_theta)
unsat
(error "line 67 column 10: model is not available")

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------

