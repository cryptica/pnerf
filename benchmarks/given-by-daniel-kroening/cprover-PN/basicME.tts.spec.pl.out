PETRINIZER: The checker for Petri Nets
[-v benchmarks/given-by-daniel-kroening/cprover-PN/basicME.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [t1], [t2,t1]).
place(s1, [t2], [t3]).
place(s2, [t3], [t4]).
place(l4, [t5], [t7]).
place(l5, [t6], [t8]).
place(l1, [t8,t7,t2,t1], [t6,t5]).
place(s4, [t5], [t9]).
place(s5, [t9], [t10]).
place(s6, [t10], [t11]).
place(s7, [t6], [t12]).
place(s8, [t12], [t13]).
place(s9, [t13], [t14]).
place(s10, [t7], [t15]).
place(l3, [t15,t14,t4], [t13,t10]).
place(s11, [t8], [t16]).
place(s3, [t16,t15,t14,t11,t4], [t8,t7,t6,t5]).
place(l2, [t16,t11,t3], [t12,t9]).
place(l0, [init1,t13,t12,t10,t9], [t16,t15,t14,t11,t4,t3,t2,t1]).

transition(t1, [l0,s0], [s0,l1]).
transition(t2, [l0,s0], [s1,l1]).
transition(t3, [l0,s1], [s2,l2]).
transition(t4, [l0,s2], [s3,l3]).
transition(t5, [l1,s3], [s4,l4]).
transition(t6, [l1,s3], [s7,l5]).
transition(t7, [l4,s3], [s10,l1]).
transition(t8, [l5,s3], [s11,l1]).
transition(t9, [l2,s4], [s5,l0]).
transition(t10, [l3,s5], [s6,l0]).
transition(t11, [l0,s6], [s3,l2]).
transition(t12, [l2,s7], [s8,l0]).
transition(t13, [l3,s8], [s9,l0]).
transition(t14, [l0,s9], [s3,l3]).
transition(t15, [l0,s10], [s3,l3]).
transition(t16, [l0,s11], [s3,l2]).
transition(init1, [], [l0]).

weight(l0, t1, 1).
weight(s0, t1, 1).
weight(t1, s0, 1).
weight(t1, l1, 1).
weight(l0, t2, 1).
weight(s0, t2, 1).
weight(t2, s1, 1).
weight(t2, l1, 1).
weight(l0, t3, 1).
weight(s1, t3, 1).
weight(t3, s2, 1).
weight(t3, l2, 1).
weight(l0, t4, 1).
weight(s2, t4, 1).
weight(t4, s3, 1).
weight(t4, l3, 1).
weight(l1, t5, 1).
weight(s3, t5, 1).
weight(t5, s4, 1).
weight(t5, l4, 1).
weight(l1, t6, 1).
weight(s3, t6, 1).
weight(t6, s7, 1).
weight(t6, l5, 1).
weight(l4, t7, 1).
weight(s3, t7, 1).
weight(t7, s10, 1).
weight(t7, l1, 1).
weight(l5, t8, 1).
weight(s3, t8, 1).
weight(t8, s11, 1).
weight(t8, l1, 1).
weight(l2, t9, 1).
weight(s4, t9, 1).
weight(t9, s5, 1).
weight(t9, l0, 1).
weight(l3, t10, 1).
weight(s5, t10, 1).
weight(t10, s6, 1).
weight(t10, l0, 1).
weight(l0, t11, 1).
weight(s6, t11, 1).
weight(t11, s3, 1).
weight(t11, l2, 1).
weight(l2, t12, 1).
weight(s7, t12, 1).
weight(t12, s8, 1).
weight(t12, l0, 1).
weight(l3, t13, 1).
weight(s8, t13, 1).
weight(t13, s9, 1).
weight(t13, l0, 1).
weight(l0, t14, 1).
weight(s9, t14, 1).
weight(t14, s3, 1).
weight(t14, l3, 1).
weight(l0, t15, 1).
weight(s10, t15, 1).
weight(t15, s3, 1).
weight(t15, l3, 1).
weight(l0, t16, 1).
weight(s11, t16, 1).
weight(t16, s3, 1).
weight(t16, l2, 1).
weight(init1, l0, 1).

init(l0, 1).
init(s0, 1).

cond('(>= s3 1)').
cond('(>= l1 1)').
cond('(>= l3 1)').
cond('(>= l4 2)').

target(s3, 1).
target(l1, 1).
target(l3, 1).
target(l4, 2).


* Constructing constraints C' for petri net N
(declare-fun s0 () Real)
(declare-fun s1 () Real)
(declare-fun s2 () Real)
(declare-fun l4 () Real)
(declare-fun l5 () Real)
(declare-fun l1 () Real)
(declare-fun s4 () Real)
(declare-fun s5 () Real)
(declare-fun s6 () Real)
(declare-fun s7 () Real)
(declare-fun s8 () Real)
(declare-fun s9 () Real)
(declare-fun s10 () Real)
(declare-fun l3 () Real)
(declare-fun s11 () Real)
(declare-fun s3 () Real)
(declare-fun l2 () Real)
(declare-fun l0 () Real)
(assert (>= 0 (+ (- l0) l1)))
(assert (>= 0 (+ (- l0) l1 (- s0) s1)))
(assert (>= 0 (+ (- l0) l2 (- s1) s2)))
(assert (>= 0 (+ (- l0) l3 (- s2) s3)))
(assert (>= 0 (+ (- l1) l4 (- s3) s4)))
(assert (>= 0 (+ (- l1) l5 (- s3) s7)))
(assert (>= 0 (+ l1 (- l4) s10 (- s3))))
(assert (>= 0 (+ l1 (- l5) s11 (- s3))))
(assert (>= 0 (+ l0 (- l2) (- s4) s5)))
(assert (>= 0 (+ l0 (- l3) (- s5) s6)))
(assert (>= 0 (+ (- l0) l2 s3 (- s6))))
(assert (>= 0 (+ l0 (- l2) (- s7) s8)))
(assert (>= 0 (+ l0 (- l3) (- s8) s9)))
(assert (>= 0 (+ (- l0) l3 s3 (- s9))))
(assert (>= 0 (+ (- l0) l3 (- s10) s3)))
(assert (>= 0 (+ (- l0) l2 (- s11) s3)))
(assert (>= 0 (+ l0)))
(assert (= 1 (+ 0 (- s0) (* 2 l4) l1 l3 s3 (- l0))))
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= l4 0))
(assert (>= l5 0))
(assert (>= l1 0))
(assert (>= s4 0))
(assert (>= s5 0))
(assert (>= s6 0))
(assert (>= s7 0))
(assert (>= s8 0))
(assert (>= s9 0))
(assert (>= s10 0))
(assert (>= l3 0))
(assert (>= s11 0))
(assert (>= s3 0))
(assert (>= l2 0))
(assert (>= l0 0))
(check-sat)
(get-model)

* Checking SAT(C')
sat
(model 
  (define-fun l3 () Real
    (/ 1.0 2.0))
  (define-fun s7 () Real
    (/ 1.0 2.0))
  (define-fun s9 () Real
    1.0)
  (define-fun l5 () Real
    0.0)
  (define-fun l2 () Real
    0.0)
  (define-fun l4 () Real
    (/ 1.0 2.0))
  (define-fun s6 () Real
    (/ 1.0 2.0))
  (define-fun s8 () Real
    (/ 1.0 2.0))
  (define-fun l0 () Real
    0.0)
  (define-fun s11 () Real
    (/ 1.0 2.0))
  (define-fun s0 () Real
    1.0)
  (define-fun s2 () Real
    1.0)
  (define-fun s3 () Real
    (/ 1.0 2.0))
  (define-fun s1 () Real
    1.0)
  (define-fun s5 () Real
    0.0)
  (define-fun s4 () Real
    0.0)
  (define-fun l1 () Real
    0.0)
  (define-fun s10 () Real
    1.0)
)
- sat, getting model A' for C'
assignment('l3', 1.0/2.0).
assignment('s7', 1.0/2.0).
assignment('s9', 1.0).
assignment('l5', 0.0).
assignment('l2', 0.0).
assignment('l4', 1.0/2.0).
assignment('s6', 1.0/2.0).
assignment('s8', 1.0/2.0).
assignment('l0', 0.0).
assignment('s11', 1.0/2.0).
assignment('s0', 1.0).
assignment('s2', 1.0).
assignment('s3', 1.0/2.0).
assignment('s1', 1.0).
assignment('s5', 0.0).
assignment('s4', 0.0).
assignment('l1', 0.0).
assignment('s10', 1.0).
- constructing invariant I for petri net N and model A'
(assert (>= 1.0 (+ s0 s1 s2 (* 0.5 l4) (* 0.5 s6) (* 0.5 s7) (* 0.5 s8) s9 s10 (* 0.5 l3) (* 0.5 s11) (* 0.5 s3))))

* Invariant I for the petri net:
(assert (>= 1.0 (+ s0 s1 s2 (* 0.5 l4) (* 0.5 s6) (* 0.5 s7) (* 0.5 s8) s9 s10 (* 0.5 l3) (* 0.5 s11) (* 0.5 s3))))

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------


