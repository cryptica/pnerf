PETRINIZER: The checker for Petri Nets
[benchmarks/given-by-daniel-kroening/cprover-PN/newrtp.tts.spec.pl]

* Constructing petri net N from input file
place(l0, [], [t1]).
place(s0, [], [t1]).
place(l1, [t1], [t2]).
place(l3, [t3], [t4]).
place(l4, [t4], [t6,t5]).
place(l5, [t5], [t7]).
place(l6, [t7], [t10,t9,t8]).
place(l7, [t8], [t11]).
place(l8, [t9], [t12]).
place(l9, [t12,t11,t10,t6], [t13]).
place(s1, [t13,t12,t11,t10,t9,t8,t7,t6,t5,t4,t3,t2,t1], [t13,t12,t11,t10,t9,t8,t7,t6,t5,t4,t3,t2]).
place(l2, [t13,t2], [t3]).

transition(t1, [l0,s0], [s1,l1]).
transition(t2, [l1,s1], [s1,l2]).
transition(t3, [l2,s1], [s1,l3]).
transition(t4, [l3,s1], [s1,l4]).
transition(t5, [l4,s1], [s1,l5]).
transition(t6, [l4,s1], [s1,l9]).
transition(t7, [l5,s1], [s1,l6]).
transition(t8, [l6,s1], [s1,l7]).
transition(t9, [l6,s1], [s1,l8]).
transition(t10, [l6,s1], [s1,l9]).
transition(t11, [l7,s1], [s1,l9]).
transition(t12, [l8,s1], [s1,l9]).
transition(t13, [l9,s1], [s1,l2]).

init(s0, 1).
init(l0, init1).

cond('(>= init1 1)').
cond('(>= s1 1)').
cond('(>= l5 1)').
cond('(>= l9 1)').


* Constructing constraint C_0 for petri net N
(declare-fun init1 () Int)
(declare-fun l0 () Int)
(declare-fun s0 () Int)
(declare-fun l1 () Int)
(declare-fun l3 () Int)
(declare-fun l4 () Int)
(declare-fun l5 () Int)
(declare-fun l6 () Int)
(declare-fun l7 () Int)
(declare-fun l8 () Int)
(declare-fun l9 () Int)
(declare-fun s1 () Int)
(declare-fun l2 () Int)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(declare-fun t3 () Int)
(declare-fun t4 () Int)
(declare-fun t5 () Int)
(declare-fun t6 () Int)
(declare-fun t7 () Int)
(declare-fun t8 () Int)
(declare-fun t9 () Int)
(declare-fun t10 () Int)
(declare-fun t11 () Int)
(declare-fun t12 () Int)
(declare-fun t13 () Int)
(assert (>= l0 0))
(assert (>= s0 0))
(assert (>= l1 0))
(assert (>= l3 0))
(assert (>= l4 0))
(assert (>= l5 0))
(assert (>= l6 0))
(assert (>= l7 0))
(assert (>= l8 0))
(assert (>= l9 0))
(assert (>= s1 0))
(assert (>= l2 0))
(assert (>= t1 0))
(assert (>= t2 0))
(assert (>= t3 0))
(assert (>= t4 0))
(assert (>= t5 0))
(assert (>= t6 0))
(assert (>= t7 0))
(assert (>= t8 0))
(assert (>= t9 0))
(assert (>= t10 0))
(assert (>= t11 0))
(assert (>= t12 0))
(assert (>= t13 0))
(assert (= l0 (+ init1 (- t1))))
(assert (= s0 (+ 1 (- t1))))
(assert (= l1 (+ 0 t1 (- t2))))
(assert (= l3 (+ 0 t3 (- t4))))
(assert (= l4 (+ 0 t4 (- t5) (- t6))))
(assert (= l5 (+ 0 t5 (- t7))))
(assert (= l6 (+ 0 t7 (- t10) (- t8) (- t9))))
(assert (= l7 (+ 0 t8 (- t11))))
(assert (= l8 (+ 0 t9 (- t12))))
(assert (= l9 (+ 0 t10 t11 t12 t6 (- t13))))
(assert (= s1 (+ 0 t1)))
(assert (= l2 (+ 0 t13 t2 (- t3))))
(assert (>= init1 1))
(assert (>= s1 1))
(assert (>= l5 1))
(assert (>= l9 1))
(check-sat)
(get-model)

* Checking SAT(C0)
unsat
(error "line 69 column 10: model is not available")

-------------------------------------------
The petri net satisfies the property!
-------------------------------------------

