PETRINIZER: The checker for Petri Nets
[-v benchmarks/given-by-daniel-kroening/cprover-PN/reaction5.tts.spec.pl]

* Constructing petri net N from input file
place(s0, [], [t1]).
place(s1, [t1], [t2]).
place(s2, [t2], [t3]).
place(s3, [t3], [t4]).
place(l3, [t5], []).
place(l2, [t2,t1], [t6]).
place(l1, [t6], [t5]).
place(l4, [t4,t3], [t7]).
place(s5, [t6], [t7]).
place(s4, [t7,t5,t4], [t6,t5]).
place(l0, [init1,t7], [t4,t3,t2,t1]).

transition(t1, [l0,s0], [s1,l2]).
transition(t2, [l0,s1], [s2,l2]).
transition(t3, [l0,s2], [s3,l4]).
transition(t4, [l0,s3], [s4,l4]).
transition(t5, [l1,s4], [s4,l3]).
transition(t6, [l2,s4], [s5,l1]).
transition(t7, [l4,s5], [s4,l0]).
transition(init1, [], [l0]).

weight(l0, t1, 1).
weight(s0, t1, 1).
weight(t1, s1, 1).
weight(t1, l2, 1).
weight(l0, t2, 1).
weight(s1, t2, 1).
weight(t2, s2, 1).
weight(t2, l2, 1).
weight(l0, t3, 1).
weight(s2, t3, 1).
weight(t3, s3, 1).
weight(t3, l4, 1).
weight(l0, t4, 1).
weight(s3, t4, 1).
weight(t4, s4, 1).
weight(t4, l4, 1).
weight(l1, t5, 1).
weight(s4, t5, 1).
weight(t5, s4, 1).
weight(t5, l3, 1).
weight(l2, t6, 1).
weight(s4, t6, 1).
weight(t6, s5, 1).
weight(t6, l1, 1).
weight(l4, t7, 1).
weight(s5, t7, 1).
weight(t7, s4, 1).
weight(t7, l0, 1).
weight(init1, l0, 1).

init(l0, 1).
init(s0, 1).

cond('(>= s4 1)').
cond('(>= l1 2)').

target(s4, 1).
target(l1, 2).


* Constructing constraints C' for petri net N
(declare-fun s0 () Real)
(declare-fun s1 () Real)
(declare-fun s2 () Real)
(declare-fun s3 () Real)
(declare-fun l3 () Real)
(declare-fun l2 () Real)
(declare-fun l1 () Real)
(declare-fun l4 () Real)
(declare-fun s5 () Real)
(declare-fun s4 () Real)
(declare-fun l0 () Real)
(assert (>= 0 (+ (- l0) l2 (- s0) s1)))
(assert (>= 0 (+ (- l0) l2 (- s1) s2)))
(assert (>= 0 (+ (- l0) l4 (- s2) s3)))
(assert (>= 0 (+ (- l0) l4 (- s3) s4)))
(assert (>= 0 (+ (- l1) l3)))
(assert (>= 0 (+ l1 (- l2) (- s4) s5)))
(assert (>= 0 (+ l0 (- l4) s4 (- s5))))
(assert (>= 0 (+ l0)))
(assert (= 1 (+ 0 (- s0) (* 2 l1) s4 (- l0))))
(assert (>= s0 0))
(assert (>= s1 0))
(assert (>= s2 0))
(assert (>= s3 0))
(assert (>= l3 0))
(assert (>= l2 0))
(assert (>= l1 0))
(assert (>= l4 0))
(assert (>= s5 0))
(assert (>= s4 0))
(assert (>= l0 0))
(check-sat)
(get-model)

* Checking SAT(C')
unsat
(error "line 33 column 10: model is not available")
 - unsat

-------------------------------------------
The petri net may not satisfy the property
-------------------------------------------


