*** PROGRAM ***
let rec choice (x, y) = 
  if x > 0 && y > 0 then
    if nondet () then 
      choice (x-1, x)
    else 
      choice (y-2, x+1)
  else 
    ()
in
choice (read_int (), read_int ())

*** TRANSFORMATION ***

Some subexpressions:

e =
let rec choice (x, y) = 
  if x > 0 && y > 0 then
    if nondet () then 
      choice (x-1, x)
    else 
      choice (y-2, x+1)
  else 
    ()
in
choice (read_int (), read_int ())
e1 =
  if x > 0 && y > 0 then
    if nondet () then 
      choice (x-1, x)
    else 
      choice (y-2, x+1)
  else 
    ()
e2 =
  choice (read_int (), read_int ())
e3 =
  if nondet () then 
    choice (x-1, x)
  else 
    choice (y-2, x+1)

Condensed product:

p = let rec choice = fun (x, y) -> p1 in p2
p1 =
  if x > 0 && y > 0 then
    p3
  else
    unit ()
p2 = 
  (fun s ->
    unit (read_int (), read_int ()) >>= fun xp ->
    update (fun ( _, m ) ->
      let a_x, a_y = xp in
      let m_c, (m_x, m_y) = m in
      if m_c then assert ( a_x > 0 && a_y > 0 && (a_x < m_x || a_y < m_y) );
      xp, if not m_c && nondet () then true, xp else m
    ) >>= fun () ->
    f xp >>= fun xapp ->
    update (fun _ -> s) >>= fun () ->
    unit xapp)
p3 =
    if nondet () then
      (fun s ->
	unit (x-1, x) >>= fun xp ->
	update (fun ( _, m ) ->
	  let a_x, a_y = xp in
	  let m_c, (m_x, m_y) = m in
	  if m_c then assert ( a_x > 0 && a_y > 0 && (a_x < m_x || a_y < m_y) );
	  xp, if not m_c && nondet () then true, xp else m
	) >>= fun () ->
	f xp >>= fun xapp ->
	update (fun _ -> s) >>= fun () ->
	unit xapp)
    else
      (fun s ->
	unit (y-2, x+1) >>= fun xp ->
	update (fun ( _, m ) ->
	  let a_x, a_y = xp in
	  let m_c, (m_x, m_y) = m in
	  if m_c then assert ( a_x > 0 && a_y > 0 && (a_x < m_x || a_y < m_y) );
	  xp, if not m_c && nondet () then true, xp else m
	) >>= fun () ->
	f xp >>= fun xapp ->
	update (fun _ -> s) >>= fun () ->
	unit xapp)


Partial evaluation 1:
p = let rec choice = fun (x, y) -> p1 in p2
p1 =
  if x > 0 && y > 0 then
    p3
  else
    unit ()
p2 = 
  (fun s ->
    unit (read_int (), read_int ()) >>= fun xp ->
    update (fun ( _, m ) ->
      let a_x, a_y = xp in
      let m_c, (m_x, m_y) = m in
      if m_c then assert ( a_x > 0 && a_y > 0 && (a_x < m_x || a_y < m_y) );
      xp, if not m_c && nondet () then true, xp else m
    ) >>= fun () ->
    f xp >>= fun xapp ->
    update (fun _ -> s) >>= fun () ->
    unit xapp)
p3 =
    if nondet () then
      (fun s ->
	update (fun ( _, m ) ->
	  let m_c, (m_x, m_y) = m in
	  if m_c then assert ( x-1 > 0 && x > 0 && (x-1 < m_x || x < m_y) );
	  (x-1, x), if not m_c && nondet () then true, (x-1, x) else m
	) >>= fun () ->
	f (x-1, x) >>= fun xapp ->
	update (fun _ -> s) >>= fun () ->
	unit xapp)
    else
      (fun s ->
	unit (y-2, x+1) >>= fun xp ->
	update (fun ( _, m ) ->
	  let m_c, (m_x, m_y) = m in
	  if m_c then assert ( y-2 > 0 && x+1 > 0 && (y-2 < m_x || x+1 < m_y) );
	  (y-2, x+1), if not m_c && nondet () then true, (y-2, x+1) else m
	) >>= fun () ->
	f xp >>= fun xapp ->
	update (fun _ -> s) >>= fun () ->
	unit xapp)


	

Final product:

let rec choice = fun (x, y) ->
  if x > 0 && y > 0 then
    if nondet () then
      (fun s ->
	update (fun ( _, m ) ->
	  let m_c, (m_x, m_y) = m in
	  if m_c then assert ( x-1 > 0 && x > 0 && (x-1 < m_x || x < m_y) );
	  (x-1, x), if not m_c && nondet () then true, (x-1, x) else m
	) >>= fun () ->
	f (x-1, x) >>= fun xapp ->
	update (fun _ -> s) >>= fun () ->
	unit xapp)
    else
      (fun s ->
	unit (y-2, x+1) >>= fun xp ->
	update (fun ( _, m ) ->
	  let m_c, (m_x, m_y) = m in
	  if m_c then assert ( y-2 > 0 && x+1 > 0 && (y-2 < m_x || x+1 < m_y) );
	  (y-2, x+1), if not m_c && nondet () then true, (y-2, x+1) else m
	) >>= fun () ->
	f xp >>= fun xapp ->
	update (fun _ -> s) >>= fun () ->
	unit xapp)
  else
    unit ()
in 
(fun s ->
  unit (read_int (), read_int ()) >>= fun xp ->
  update (fun ( _, m ) ->
    let a_x, a_y = xp in
    let m_c, (m_x, m_y) = m in
    if m_c then assert ( a_x > 0 && a_y > 0 && (a_x < m_x || a_y < m_y) );
    xp, if not m_c && nondet () then true, xp else m
  ) >>= fun () ->
  f xp >>= fun xapp ->
  update (fun _ -> s) >>= fun () ->
  unit xapp)
